                      ; TTL "NEUMON VERS. 5.4 SPECIAL"
                      ;
                      ;
                      ;
                      ; monitor-program for Eurocom- microcomputer with
                      ; MC 6809-CPU for floppydisk, with Boot for
                      ; singledensity and RAM extension
                      ;
                      ; History:
                      ; ========
                      ;
                      ;
                      ; 20.11.84 W. Schwotzer         last changes on real 
platform
                      ; 27.06.96 W. Schwotzer         adapted to as6809, a 
unix cross assembler for
                      ;                               microcomputers
                      ; 23.02.97 W. Schwotzer         added commands INSLIN 
and DELLIN for better
                      ;                               editor support
                      ; 24.05.97 W. Schwotzer         support for serial I/O 
after boot (INITSP)
                      ; 31.08.98 W. Schwotzer         support for insert mode 
cursor with CTRL-F
                      ;                               and CTRL-G
                      ; 09.02.2004 W. Schwotzer       After Reset clear up to 
2 x 288K RAM extension
                      ; 16.09.2018 W. Schwotzer       Make it assemble with:
                      ;                               A09 V1.37 
(https://github.com/Arakula/A09)
                      ;                               asm6809 V2.11 
(http://www.6809.org.uk/asm6809/)
                      ; 17.09.2018 W. Schwotzer       Fully translated to 
english
 
                      ; SYM 6
                      ; OPT -G,P,M,E,-C,
 
                      ; Command line for asm6809:
                      ;    asm6809 --setdp=0 -H -l neumon54.lst -o 
neumon54.hex neumon54.asm
                      ; Command line for a09:
                      ;    a09 -Xneumon54.hex -Lneumon54.lst neumon54.asm
                      ;
 
 
                      ; PAG
                      VERS   EQU  4      ;for ELTEC compatibility
 
                      ANFANG EQU  $F000
                      DIRPAG EQU  $EF00
 
                      DRCTPG EQU  DIRPAG/$100
                      ;       SETDP  DRCTPG
 
                      ; Zero-Page Locations
                             ORG  DIRPAG
 
                      DUMMY  RMB  1          ;fill byte
                      INSRTF RMB  1          ;insert mode flag
                      ESCFLG RMB  1          ;escape sequence flag
                      DBASE  RMB  2          ;display base address pointer
                      XADDR  RMB  2          ;x-coordinate of cursor
                      YADDR  RMB  2          ;y-coordinate of cursor
                      EOLNX  RMB  2          ;end of line pointer
                      SCROFS RMB  1          ;screen offset from display
                      BOTTOM RMB  2          ;bottom line pointer
                      INVFLG RMB  1          ;invert flag
                      NEWST1 RMB  1          ;second entry flag
                      NEWST2 RMB  1          ;new stack active
                      SAVEST RMB  2          ;save user stack
                      GYADDR RMB  2          ;dot flag
                      GXADDR RMB  2          ;save for x-coordinate
                      PGEFLG RMB  1          ;page flag 511/256 lines
                      COLTAB RMB  6*4+1      ;color table FF ends the
                             RMB  1          ;dummy
                      NRLINS RMB  1          ;number of lines per char
                      EMPTY1 RMB  1          ;empty lines
                      EMPTY2 RMB  1
                      EMPTY3 RMB  1
                      LINES  RMB  1          ;lines of char's per page
                      NRCHR  RMB  1          ;no of char's per line
                      SCRLIN RMB  2          ;used lines per screen
                      MULINS RMB  1          ;lines per chr. without e??
                             RMB  1          ;dummy
                      CHROFS RMB  1          ;chara. offset
                      INTPAG RMB  1          ;init on page
                      CTLTA  RMB  2          ;control character table
                      CHATAB RMB  2          ;character table
                      SCREN1 RMB  2          ;RAM bank for screen
                      SCREN2 RMB  2          ;second page
                      ESCVC  RMB  2          ;escape vector
                      ESCTBL RMB  2          ;escape table
                      SOFT   RMB  2          ;softscroll
                      XBOTOM RMB  2          ;bottom pointer
                      BUMPV  RMB  2          ;bump vector
                      ;
                      ;       OPT  NOL
                      ORIG   SET  *
                      ;       OPT  LIS
 
                             ORG  DIRPAG+$58
 
                      HIGHLI RMB  1         ;highlight flag
                      DEUTSC RMB  1         ;FlAG for characterset
                      NEWCHR RMB  1         ;last input from parallel keyboard
                      CURSOR RMB  1         ;Cursor visible / unvisible
                      UNUSED RMB  1
                      COMMAN RMB  18        ;command at interrupt
                      BRPEND EQU  *
 
                             ORG  DIRPAG+$70
 
                      SW3VEC RMB  2          ;---
                      SW2VEC RMB  2
                      FIRQVC RMB  2          ;Interrupt-
                      IRQVEC RMB  2          ;vectors
                      SWIVEC RMB  2
                      NMIVEC RMB  2          ;---
                      SAVUST RMB  2          ;user Stack
                      MEMADR RMB  2          ;Memory-Address
                      TEMPX  RMB  2          ;temporary
                      TEMPY  RMB  2          ;memory
                      TEMPA  RMB  1          ;
                      LODFLG RMB  1          ;loadingflag
                      SERPAR RMB  1          ;seriell/parallel flag
                      LOCCNT RMB  1          ;memorycell counter
                      BYTANZ RMB  1          ;bytecount
                      CHECKS RMB  1          ;checksumcounter
                      TEMP   RMB  1
                      UL     RMB  1          ;upper/lower case flag
 
                             ORG  DIRPAG+$DE
 
                      SAVE   RMB  2          ;pointer for MMU STACK
                      MMURAM RMB  16         ;RAM for MMU contents
 
                      ; HARDWARE ADRESSEN
 
                      MMU    EQU  $FFE0      ;Memory Management Unit
                      ;
                      PIA1AD EQU  $FCF0      ;Pia A data- and
                      PIA1AC EQU  $FCF1      ;controlregister
                      PIA1BD EQU  $FCF2      ;Pia B Data- and
                      PIA1BC EQU  $FCF3      ;controlregister
                      PIA2BD EQU  $FCFA      ;Pia 2B Dataregister
 
                      ACIACO EQU  $FCF4      ;ACIA control- und
                      ACIADA EQU  $FCF5      ;dataregister
 
                      VIDPAG EQU  $FCF6      ;videopageregister
                      BILANF EQU  $FCF7      ;scrollregister
 
                      ;
                      ; floppycontroler registers
                      ;
                      FLCOMM EQU  $FD30      ;commandregister
                      FLSEKT EQU  $FD32      ;sectorregister
                      FLDATA EQU  $FD33      ;dataregister
                      FLDRIV EQU  $FD38      ;driveselectregister
                      ;
                      ; emulator command register
                      ;
                      EMUCMD EQU  $FD3C
 
                      ; System equates for FLEX 9.1
                      ;
                      WARMS  EQU  $CD03      ;warmstart entry point
                      DOCMND EQU  $CD4B      ;call DOS as a subroutine
                      LINBUF EQU  $C080      ;line buffer
                      BUFPNT EQU  $CC14      ;line buffer pointer
 
                      CLS    EQU  $0C        ;form feed
                      ESC    EQU  $1B        ;Escape
                      ENDE   EQU  $1A
                      BLANK  EQU  $20
 
                      ZCASEU EQU  $C0
                      ZUNUBI EQU  $F03F
                      UNUBI2 EQU  $FC0F
                      STACK  EQU  $EF00
                      STACK2 EQU  STACK-$C0
                      PIXLIN EQU  84*6       ;Pixels/Line
                      SCRN1  EQU  $0C0C      ;Video page
                      SCRN2  EQU  $0808      ;Video page if double res.
                      BOTOM1 EQU  $00FE
                      LPCNT  EQU  17
                      USERST EQU  STACK-$120
 
 
                             ORG  ANFANG
                      ;
                      ; Einsprung Tabelle
                      ;
 F000 7EF128          ZRESTA JMP  BEGINN    ;Enter from restart
 F003 7EF379          ZFROMT JMP  FROMTO    ;Input start- end-adr.
 F006 1A08                   ORCC #%1000     ;convert HEX to BCD
 F008 39                     RTS
 F009 7EF392          ZCHEXL JMP  CHEXL     ;Conv. MS-BCD to HEX
 F00C 7EF396          ZCHEXR JMP  CHEXR     ;Conv. LS-BCD to HEX
 F00F 7EF49C          ZIN4HX JMP  IN4HX0    ;Input address
 F012 7EF3CD          ZUINCH JMP  INCH      ;Input 1 character
 F015 7EF420          ZINCHA JMP  INCHA     ;Input 1 char. without echo
 F018 7EF3EA          ZOUTC2 JMP  OUTCH     ;Output 1 character
 F01B 7EF3AF          ZOUT2H JMP  OUT2HX    ;Print 2 HEX-Char.+SP
 F01E 7EF3AD          ZOUT4H JMP  OUT4HX    ;Print 4 HEX-Char.+SP
 F021 7EF3C1          ZPCRLF JMP  PCRLF     ;Print <CR>, <LF>
 F024 7EF3B5          ZPDATA JMP  PDATA     ;Print <CR>, <LF> + String
 F027 7EF3B7          ZPDAT1 JMP  PDATA1    ;Print String
 F02A 7EF3B1          ZSPACE JMP  PSPACE    ;Print Space
 F02D 7EF225          TO_HKS JMP  HKS       ;Warmstart
 F030 7EF40F          ZLOAD0 JMP  LOAD0     ;Input from ACIA
 F033 7EF3F8          ZRECD0 JMP  OUTCHS    ;Output on ACIA
 F036 F5A5            ZSWTCH FDB  SWITCH    ;Switch MMU
 F038 F5D0            ZSWBAK FDB  SWTCHB    ;Switch back MMU
 F03A F478            ZCONVT FDB  CNVERT    ;Convert upper/lower case
 F03C F56A            ZUSRCH FDB  SEARCH    ;Table search
 F03E F578            ZUCOMP FDB  COMPAR    ;String compare
 F040 FDBA            ZXDCHR FDB  XDCHAR    ;Draw character
 F042 FEC5            ZUXINV FDB  INVCUR    ;Invert cursor
 F044 F44B            ZUSTAT FDB  STATUS    ;Keyboard Status (FLEX compatible)
                      ;
                      ;
                      ; command table in main control loop (HKS)
                      ;
                      HKSTAB EQU  *
 F046 44                     FCC  "D"        ;German char.set
 F047 FFC7                   FDB  GERMAN
 F049 49                     FCC  "I"        ;ASCII char.set
 F04A FFCF                   FDB  ASCII
 F04C 47                     FCC  "G"        ;Start Userpgm
 F04D F35C                   FDB  GO
 F04F 4B                     FCC  "K"        ;Book Diskette
 F050 FD40                   FDB  BOOT
 F052 4D                     FCC  "M"        ;Memory
 F053 F249                   FDB  MEMORY
 F055 50                     FCC  "P"        ;Put value
 F056 F30E                   FDB  PUT
 F058 54                     FCC  "T"        ;Table
 F059 F2A1                   FDB  TABLE
 F05B 56                     FCC  "V"        ;Video-Terminal
 F05C F339                   FDB  VIDEO
 F05E 58                     FCC  "X"        ;Flex Warmstart
 F05F F373                   FDB  CFLEX
 F061 5A                     FCC  "Z"        ;Exit emulator
 F062 FA07                   FDB  EMUEXIT
                      ;
 F064 2F              MEMTAB FCC  "/"        ;Slash
 F065 F276                   FDB  SLASH
 F067 2E                     FCC  "."        ;Point
 F068 F28B                   FDB  POINT
 F06A 5E                     FCC  "^"        ;Uparrow
 F06B F28F                   FDB  UPAROW
 F06D 0A                     FCB  $0A        ;line-feed
 F06E F27A                   FDB  LINFED
 F070 0D                     FCB  $0D        ;carriage-return
 F071 F225                   FDB  HKS
                      ENDHT  EQU  *         ;End of HKS-Table
                      ;
                      ; outputtexts
                      ;
                             ORG ANFANG+$7C
 F07C 00              INITSP FCB  0           ; initial value for SERPAR
                      MESEUR EQU  *
                      THALLO EQU  *
 F07D 4555524F434F4D         FCC  "EUROCOM MONITOR "
 F084 204D4F4E49544F
 F08B 5220
                      LVN    EQU  *
                      ;
                      ;
                      ;       OPT  NOL
                      ;       OPT  LIS
                      ;
 F08D 56352E                 FCC  "V5."
 F090 34                     FCB  VERS+'0'
 F091 20737065632E           FCC  " spec."
 F097 0D0A                   FCB  $0D,$0A
 F099 04                     FCB  $04
                      ;
 F09A 46524F4D3A20    TFROM  FCC  "FROM: "
 F0A0 04                     FCB  4
 F0A1 20544F3A20      TTO    FCC  " TO: "
 F0A6 04                     FCB  4
 F0A7 2056616C75653A  WERTMS FCC  " Value: "
 F0AE 20
 F0AF 04                     FCB  4
 F0B0 3E              HKSTXT FCC  ">"
 F0B1 04                     FCB  4
 F0B2 425250          ZF0A5  FCC  "BRP"
 F0B5 04                     FCB  4
 F0B6 43433D          TREGIS FCC  "CC="
 F0B9 04                     FCB  4
 F0BA 413D                   FCC  "A="
 F0BC 04                     FCB  4
 F0BD 423D                   FCC  "B="
 F0BF 04                     FCB  4
 F0C0 44503D                 FCC  "DP="
 F0C3 04                     FCB  4
 F0C4 583D                   FCC  "X="
 F0C6 04                     FCB  4
 F0C7 593D                   FCC  "Y="
 F0C9 04                     FCB  4
 F0CA 553D                   FCC  "U="
 F0CC 04                     FCB  4
 F0CD 50433D                 FCC  "PC="
 F0D0 04                     FCB  4
 F0D1 533D                   FCC  "S="
 F0D3 04                     FCB  4
                      ;
 F0D4 48415244434F50  DEFCOM FCC  "HARDCOPY"
 F0DB 59
 F0DC 0D                     FCB  $0D
                      ;
                      ;
                      ; NMI-Einsprung
                      ;
 F0DD 10FFEF7C        NMI1   STS  SAVUST    ;save stack
 F0E1 10CEEF00               LDS  #STACK    ;use own stack
 F0E5 BDF420                 JSR  INCHA     ; get a character
 F0E8 BDF481                 JSR  LOWUP     ; convert to uppercase
 F0EB 8148                   CMPA #'H'      ; is it HARDCOPY ?
 F0ED 261E                   BNE  NORMAL
 
 F0EF 8EC080                 LDX  #LINBUF
 F0F2 BFCC14                 STX  BUFPNT
 F0F5 108EEF5D               LDY  #COMMAN
 F0F9 A6A0            DOLOOP LDA  ,Y+
 F0FB A780                   STA  ,X+
 F0FD 810D                   CMPA #$0D
 F0FF 26F8                   BNE  DOLOOP
 F101 BDCD4B                 JSR  DOCMND
 F104 10FEEF7C               LDS  SAVUST
 F108 1CAF                   ANDCC #%10101111         ; CLI
 F10A 7ECD03                 JMP  WARMS
 
 F10D 8142            NORMAL CMPA #'B'        ;user wants to break?
 F10F 2705                   BEQ  NORM1
 
 F111 10FEEF7C               LDS  SAVUST     ;get userstack back
 
 F115 3B                     RTI             ;finish interrupt
 
 F116 BDF1E7          NORM1  JSR  INITI
 
 F119 B6F07C                 LDA  INITSP
 F11C B7EF86                 STA  SERPAR
 F11F 7FEF85                 CLR  LODFLG
 F122 BDF3C1                 JSR  PCRLF
 F125 1603EF                 LBRA IRQEN1     ;output all registers
                      ;
                      ; RESTART entry point
                      ;
 F128 10CEEF00        BEGINN LDS  #STACK
 F12C CEFFF0                 LDU  #MMU+16
 F12F CC0303                 LDD  #$0303
 F132 3604                   PSHU B         ;EPROM at $F000
 F134 3602                   PSHU A         ;EURO-RAM   at $E000
 F136 CC0303                 LDD  #$0303
 F139 3606                   PSHU D         ;EURO-RAM   at $C000-$DFFF
 F13B 4F                     CLRA
 F13C 5F                     CLRB
 F13D 1F01                   TFR  D,X
 F13F CEF000                 LDU  #$F000
 F142 3616            CLRSC1 PSHU X,D       ;from $F000
 F144 1183C000               CMPU #$C000    ;to $C000 clear memory
 F148 26F8                   BNE  CLRSC1
 F14A CEFFF0                 LDU  #MMU+16
 F14D 8EF20F                 LDX  #CLRTAB
 F150 8D66                   BSR  CLRSCR
 F152 8D64                   BSR  CLRSCR
 F154 3450                   PSHS U,X
 F156 BDF1E7                 JSR  INITI
 F159 B6F07C                 LDA  INITSP
 F15C B7EF86                 STA  SERPAR
 F15F BDF5F0                 JSR  INTSCR    ;from this point RAM extension can 
be used
 F162 3550                   PULS U,X
 F164 8D52                   BSR  CLRSCR
 F166 8D50                   BSR  CLRSCR
 F168 CCEFDE                 LDD  #SAVE
 F16B FDEFDE                 STD  SAVE
 F16E CEFFF0                 LDU  #MMU+16
 F171 108EEFF0               LDY  #MMURAM+16
 F175 8E0303                 LDX  #$0303
 F178 CC0303                 LDD  #$0303    ;EUROC. $C000-$EFFF, and then ROM
 F17B 8D63                   BSR  PUSHU1
 F17D 8E0707                 LDX  #$0707    ;EUROC.-Ram from 8000-BFFF
 F180 8D5C                   BSR  PUSHU
 F182 8E0B0B                 LDX  #$0B0B    ;EUROC.-Ram from 4000-8000
 F185 8D57                   BSR  PUSHU
 F187 8E0F0F                 LDX  #$0F0F    ;EUROC.-Ram from 0000-4000
 F18A 8D52                   BSR  PUSHU
                      ;
                      ; now total RAM extension initialized
                      ;
 F18C 8EEDD4                 LDX  #USERST-12
 F18F 9F7C                   STX  SAVUST-DIRPAG
 F191 8EF0DD                 LDX  #NMI1
 F194 9F7A                   STX  NMIVEC-DIRPAG
 F196 8EF07D                 LDX  #THALLO
 F199 BDF3B7                 JSR  PDATA1
 F19C 8EF501                 LDX  #IRQENT
 F19F 9F76                   STX  IRQVEC-DIRPAG
 F1A1 8EF4F5                 LDX  #SWIENT
 F1A4 9F78                   STX  SWIVEC-DIRPAG
 F1A6 8EEF5D                 LDX  #COMMAN
 F1A9 108EF0D4               LDY  #DEFCOM
 F1AD A6A0            COLOOP LDA  ,Y+       ;Default command
 F1AF A780                   STA  ,X+       ;copy to direct page
 F1B1 810D                   CMPA #$0D      ;must with CR
 F1B3 26F8                   BNE  COLOOP
 F1B5 160B88                 LBRA BOOT      ;now try to boot
                      ;
                      ; Clear 3 16K-Blocks from CLRTAB
                      ;
 F1B8 C603            CLRSCR LDB   #3       ;loop over 3 pages
 F1BA A680            CLRP1  LDA  ,X+
 F1BC 8D04                   BSR   CLRPAG
 F1BE 5A                     DECB
 F1BF 26F9                   BNE   CLRP1
 F1C1 39                     RTS
                      ;
 F1C2 3454            CLRPAG PSHS  B,X,U
 F1C4 1F89                   TFR   A,B
 F1C6 335C                   LEAU  -4,U
 F1C8 1F01                   TFR   D,X
 F1CA 3616                   PSHU  D,X
 F1CC 3616                   PSHU  D,X
 F1CE 3616                   PSHU  D,X
 F1D0 4F                     CLRA
 F1D1 8E0000                 LDX   #0
 F1D4 CEC000                 LDU   #$C000
 F1D7 BDF8DA                 JSR   CLEARS     ;Clear 1 page from $0-$BFFF
 F1DA 35D4                   PULS  B,X,U,PC
 F1DC FFFF                   FCB   $FF,$FF    ;Stuffing bytes
 
 F1DE 1F10            PUSHU  TFR  X,D
 F1E0 3616            PUSHU1 PSHU X,D
 F1E2 AFA3                   STX  ,--Y
 F1E4 EDA3                   STD  ,--Y
 F1E6 39                     RTS
 
 F1E7 86EF            INITI  LDA  #DRCTPG
 F1E9 1F8B                   TFR  A,DP       ;set direct page
 F1EB 8EFCF0                 LDX  #PIA1AD    ;---
 F1EE 6F01                   CLR  $01,X
 F1F0 6F03                   CLR  $03,X
 F1F2 6F0B                   CLR  $0B,X
 F1F4 6F84                   CLR  ,X         ;PIA-Initialization
 F1F6 865E                   LDA  #$5E
 F1F8 A70A                   STA  $A,X
 F1FA 863E                   LDA  #$3E
 F1FC A701                   STA  $01,X
 F1FE A702                   STA  $02,X
 F200 A70B                   STA  $0B,X
 F202 A703                   STA  $03,X      ;---
 F204 8603                   LDA  #$03
 F206 A70A                   STA  $0A,X      ;In PIA2, no Bell, MMU
 F208 A704                   STA  $04,X      ;Master Reset ACIA
 F20A 8615                   LDA  #$15
 F20C A704                   STA  $04,X      ;Initialization
 F20E 39                     RTS
                      ;
                      ;
                      ;
 F20F 00010204050608  CLRTAB FCB  0,1,2,4,5,6,8,9,$A,$C,$D,$E
 F216 090A0C0D0E
                      ;
                      ;
 F21B 863F            ERRHKS LDA  #'?'
 F21D BDF3D5                 JSR  OUTA       ;output question mark
 F220 8607                   LDA  #$07
 F222 BDF3D5                 JSR  OUTA       ;output bell
 F225 10CEEF00        HKS    LDS  #STACK     ;load stackpointer
 F229 86EF                   LDA  #DRCTPG
 F22B 1F8B                   TFR  A,DP
 F22D 0F85                   CLR  LODFLG-DIRPAG   ;clear loadflag
 F22F 8EF0B0                 LDX  #HKSTXT
 F232 BDF3B5                 JSR  PDATA      ; output input prompt ">"
 F235 BDF3CD                 JSR  INCH       ; get character from keyboard
 F238 BDF481                 JSR  LOWUP      ; convert to uppercase
 F23B CEF046                 LDU  #HKSTAB    ; pointer to input table
 F23E BDF348                 JSR  GETTAS     ; is character in input table ?
 F241 25D8                   BCS  ERRHKS     ; no, error
 F243 BDF02A                 JSR  ZSPACE     ; yes output space
                      ;
 F246 6ED801          HKS1   JMP  [$01,U]    ; execute command
                      ;
                      ;
                      ; MEMORY: output and change contents of memory 
                      ;
 F249 BDF4B1          MEMORY JSR  IN4HX      ;Input 4-digit hex-address
 F24C 9F7E                   STX  MEMADR-DIRPAG    ;Save it. Is it correct?
 F24E 25CB                   BCS  ERRHKS     ;no, input-error
 F250 BDF3B1                 JSR  PSPACE     ;output a space
                      ;
 F253 BDF3AF          MEMOR1 JSR  OUT2HX     ;Output content of address
 F256 301F                   LEAX -$01,X     ;Restore address
                      ;
 F258 BDF3CD          MEMOR2 JSR  INCH       ;Get input character
 F25B BDF481                 JSR  LOWUP      ;To upper case
 F25E CEF064                 LDU  #MEMTAB    ;Start of memory command table
 F261 BDF348                 JSR  GETTAS     ;Find character in table?
 F264 24E0                   BCC  HKS1       ;yes, execute command
 F266 BDF4DC                 JSR  INHEX1     ;no, input 2-hex digits
 F269 BDF4C6                 JSR  BYTE0      ;get byte value, is it valid?
 F26C 25AD            ERRO6  BCS  ERRHKS     ;no, input error
 F26E A784                   STA  ,X         ;yes, store byte value
 F270 A184                   CMPA ,X         ;byte value written correctly?
 F272 26A7                   BNE  ERRHKS     ;no, erro
 F274 20E2                   BRA  MEMOR2     ;loop to get next input
                      ;
                      ; SLASH: Display value of next address
                      ;
 F276 8D22            SLASH  BSR  INCADR     ;increment address
 F278 20D9                   BRA  MEMOR1     ;loop to output addr. content
                      ;
                      ; LINE-FEED: Display next address and value in new line
                      ;
 F27A 8D1E            LINFED BSR  INCADR     ;increment address
 F27C 860D                   LDA  #$0D       ;output new line
 F27E BDF3D5                 JSR  OUTA
                      ;
 F281 8EEF7E          LINFE0 LDX  #MEMADR
 F284 BDF3AD                 JSR  OUT4HX     ;output new address
 F287 9E7E                   LDX  MEMADR-DIRPAG ;load new address in X
 F289 20C8                   BRA  MEMOR1     ;loop to output addr. content
                      ;
                      ; POINT: Display value of same address
                      ;
 F28B 9E7E            POINT  LDX  MEMADR-DIRPAG ;load same address in X
 F28D 20C4                   BRA  MEMOR1     ;loop to output addr. content
                      ;
                      ; UPARROW: Display previous address and value in new 
line
                      ;
 F28F 9E7E            UPAROW LDX  MEMADR-DIRPAG    ;load address in X
 F291 301F                   LEAX -$01,X     ;get previous address in X
 F293 9F7E                   STX  MEMADR-DIRPAG    ;save address
 F295 BDF3C1                 JSR  PCRLF      ;output new line
 F298 20E7                   BRA  LINFE0     ;output address and value
                      ;
                      ; Function to increment the memory address pointer
                      ;
 F29A 9E7E            INCADR LDX  MEMADR-DIRPAG    ;load memory address into X
 F29C 3001                   LEAX $01,X      ;increment address
 F29E 9F7E                   STX  MEMADR-DIRPAG    ;store new address
 F2A0 39                     RTS
                      ;
                      ; TABLE: Output a memory dump in hex and ASCII
                      ;
 F2A1 BDF379          TABLE  JSR  FROMTO     ;Get address range
 F2A4 25C6                   BCS  ERRO6
 F2A6 DD80                   STD  TEMPX-DIRPAG     ;store start address
 F2A8 3001                   LEAX $01,X      ;increment end address
 F2AA 9F82                   STX  TEMPY-DIRPAG     ;store it
 F2AC BDF3C1          TABLE0 JSR  PCRLF      ;new line
 F2AF 8EEF80                 LDX  #TEMPX     ;get start address
 F2B2 BDF3AD                 JSR  OUT4HX     ;output it
 F2B5 C610                   LDB  #16        ;16 values per line
 F2B7 BEEF80                 LDX  TEMPX      ;start address in X
 F2BA 3410                   PSHS X          ;push it on stack
 F2BC BCEF82          TABLE1 CMPX TEMPY      ;reached end address?
 F2BF 2730                   BEQ  END_TA     ;yes, jump to output ASCII dump
 F2C1 3404                   PSHS B          ;push value counter
 F2C3 BDF3AF                 JSR  OUT2HX     ;output value of address
 F2C6 3504                   PULS B          ;restore value counter
 F2C8 9F80                   STX  TEMPX-DIRPAG     ;store current address
 F2CA 8D30                   BSR  HALTAN     ;maybe break output
 F2CC 5A                     DECB            ;have 16 values been dumped?
 F2CD 26ED                   BNE  TABLE1     ;no, continue in loop
 F2CF 3510            ASDUMP PULS X          ;Restore address
 F2D1 C611                   LDB  #17        ;16+1
 F2D3 BDF3B1                 JSR  PSPACE     ;output space
 F2D6 BCEF82          NEXTT  CMPX TEMPY      ;Reached end address?
 F2D9 1027FF48               LBEQ HKS        ;yes, jump back to hks
 F2DD 8D1D                   BSR  HALTAN     ;maybe break output
 F2DF 5A                     DECB            ;all values printed?
 F2E0 27CA                   BEQ  TABLE0     ;yes, next line
 F2E2 A680                   LDA  ,X+        ;get value from memory
 F2E4 847F                   ANDA #$7F       ;mask for 1-bit ASCII
 F2E6 8120                   CMPA #$20
 F2E8 2402                   BHS  ISAS
 F2EA 865F                   LDA  #$5F       ;replace non-printable char. by _
 F2EC BDF3EA          ISAS   JSR  OUTCH      ;Print value
 F2EF 20E5                   BRA  NEXTT      ;loop for next ASCII value
                      ;
 F2F1 8603            END_TA LDA  #3
 F2F3 3D                     MUL
 F2F4 BDF3B1          ENDT1  JSR  PSPACE     ;Output 3 spaces
 F2F7 5A                     DECB            ;for each not printed value
 F2F8 26FA                   BNE  ENDT1
 F2FA 20D3                   BRA  ASDUMP     ;jump to output ASCII
                      ;
 F2FC 347F            HALTAN PSHS A,B,X,Y,U,DP,CC
 F2FE BDF466                 JSR  TSTIN      ;keyboard input?
 F301 2409                   BCC  NOHALT     ;no, jump back
 F303 BDF420                 JSR  INCHA      ;Wait for input character
 F306 810D                   CMPA #$0D       ;Is it a carrige return?
 F308 1027FF19               LBEQ HKS        ;yes abort, go back to hks
 F30C 35FF            NOHALT PULS D,X,Y,U,DP,CC,PC
                      ;
                      ; PUT: Fill memory range with value
                      ;
 F30E BDF379          PUT    JSR  FROMTO     ;Get address range
 F311 1025FF06               LBCS ERRHKS
 F315 FDEF80                 STD  TEMPX      ;store start address
 F318 3001                   LEAX 1,X        ;increment end address
 F31A BFEF82                 STX  TEMPY      ;store it
 F31D 8EF0A7                 LDX  #WERTMS
 F320 BDF3B7                 JSR  PDATA1
 F323 BDF4C4                 JSR  BYTE       ;get value
 F326 BEEF80                 LDX  TEMPX      ;get start address in X
 F329 A784                   STA  ,X         ;store value into address
 F32B BCEF82          PUTLUP CMPX TEMPY      ;reaced end address?
 F32E 1027FEF3               LBEQ HKS        ;yes, go back to hks
 F332 A780                   STA  ,X+        ;increment address
 F334 20F5                   BRA  PUTLUP     ;loop to store value to next 
addr.
                      ;
                      ; VIDEO: Enter video terminal mode
                      ;        input from serial port to video console.
                      ;        input from keyboard to serial port.
                      ;
 F336 BDF3F8          VIDEO0 JSR  OUTCHS   ;Switch ouput to serial port
                      ;
 F339 BDF46B          VIDEO  JSR  TSTINP   ;keyboard input?
 F33C 25F8                   BCS  VIDEO0   ;yes, output to serial port
 F33E BDF413                 JSR  TSTINS   ;input from serial port?
 F341 24F6                   BCC  VIDEO    ;no, loop
 F343 BDF635                 JSR  XDTEXT   ;yes, output to video console
 F346 20F1                   BRA  VIDEO    ;loop
                      ;
                      ; Function to find an input character in an input
                      ; table
                      ; Parameter:
                      ;      A: input character
                      ; Return:
                      ;      character found if carry clear
                      ;      U: Points to jump address
                      ;
 F348 847F            GETTAS ANDA #$7F     ;convert to 7-bit ASCII
 F34A A1C4                   CMPA ,U       ;found character in table?
 F34C 270B                   BEQ  GETTS9   ;yes, go back with carry cleared
 F34E 3343                   LEAU $03,U    ;no, increment address to next 
char.
 F350 1183F073               CMPU #ENDHT   ;reached end?
 F354 26F2                   BNE  GETTAS   ;no, loop
 F356 1A01                   ORCC #%00000001 ;go back with carry set
 F358 39                     RTS
                      ;
 F359 1CFE            GETTS9 ANDCC #%11111110 ;go back with carry cleared
 F35B 39                     RTS
                      ;
                      ; GO: Continue at specified address
                      ;
 F35C BDF4B1          GO     JSR  IN4HX    ;Get jump address, ok?
 F35F 1025FEB8        ERRO3  LBCS ERRHKS   ;no, jump to hks
 F363 1F12                   TFR  X,Y      ;Store address in Y
 F365 BDF3C1                 JSR  PCRLF    ;new line
 F368 10CEEDD4               LDS  #USERST-12 ;Stack > User-Bereich
 F36C 1CAF                   ANDCC #%10101111; Enable IRQ,FIRQ interrupt
 F36E 4F              GO1    CLRA
 F36F 1F8B                   TFR  A,DP     ;clear direct page for 6800 
compatibility
 F371 1F25                   TFR  Y,PC     ;continue at specified address
                      ;
                      ; X: Jump back to FLEX
                      ;
 F373 108ECD03        CFLEX  LDY  #WARMS   ;get warmstart adress into Y
 F377 20F5                   BRA  GO1      ;proceed as with GO command
                      ;
                      ; Function to input a start and end address
                      ; from keyboard.
                      ; return:
                      ;     X: start address
                      ;     D: end address
                      ;
 F379 8EF09A          FROMTO LDX  #TFROM
 F37C 8D39                   BSR  PDATA1   ;output text "FROM"
 F37E BDF4B1                 JSR  IN4HX    ;get start address, ok?
 F381 250E                   BCS  ERRO8    ;no, jump to HKS
 F383 3410                   PSHS X        ;push address
 F385 8EF0A1                 LDX  #TTO
 F388 8D2D                   BSR  PDATA1   ;output text "TO"
 F38A BDF4B1                 JSR  IN4HX    ;get end address, ok?
 F38D 2500                   BCS  ERRO4    ;no, jump to HKS
 F38F 3506            ERRO4  PULS D        ;restore start address in D
 F391 39              ERRO8  RTS
                      ;
                      ; convert upper nibble into ASCII 0-9, A-F
                      ;
 F392 44              CHEXL  LSRA          ;shift upper nibble
 F393 44                     LSRA          ;into the lower one
 F394 44                     LSRA
 F395 44                     LSRA
                      ;
                      ; convert lower nibble into ASCII 0-9, A-F
                      ;
 F396 840F            CHEXR  ANDA #$0F     ;mask upper nibble
 F398 8B90                   ADDA #$90     ;convert binary value
 F39A 19                     DAA           ;into ASCII 0-9, A-F
 F39B 8940                   ADCA #$40
 F39D 19                     DAA
 F39E 39              PDATA3 RTS
                      ;
                      ; Output hexadecimal 16-bit value located at ,X
                      ;
 F39F 8D00            OUT4H  BSR  OUT2H      ;4 Hex-Zeichen ausgeben
                      ;
                      ; Output hexadecimal 8-bit value located at ,X
                      ;
 F3A1 A684            OUT2H  LDA  ,X
 F3A3 8DED                   BSR  CHEXL    ;convert upper nibble
 F3A5 8D2E                   BSR  OUTA     ;output character
 F3A7 A680                   LDA  ,X+
 F3A9 8DEB                   BSR  CHEXR    ;convert lower nibble
 F3AB 2028                   BRA  OUTA     ;output character
 
                      ; Output hexadecimal 16-bit value located at ,X
                      ; followed by a space.
                      ;
 F3AD 8DF2            OUT4HX BSR  OUT2H    ;output two hex digits
                      ;
                      ; Output hexadecimal 8-bit value located at ,X
                      ; followed by a space.
                      ;
 F3AF 8DF0            OUT2HX BSR  OUT2H    ;output two hex digits
 F3B1 8620            PSPACE LDA  #$20
 F3B3 2020                   BRA  OUTA     ;output space
                      ;
                      ; OUT-DATA functions
                      ;
 F3B5 8D0A            PDATA  BSR  PCRLF    ;output new line
                      ;
 F3B7 A680            PDATA1 LDA  ,X+      ;get ASCII value
 F3B9 8104                   CMPA #$04     ;is it end of text (EOT)?
 F3BB 27E1                   BEQ  PDATA3   ;yes, return
 F3BD 8D2B                   BSR  OUTCH    ;no, output character
 F3BF 20F6                   BRA  PDATA1   ;loop for next character
                      ;
 F3C1 860D            PCRLF  LDA  #$0D
 F3C3 8D25                   BSR  OUTCH    ;output CR
                      ;
 F3C5 860A            PLF    LDA  #$0A
 F3C7 2021            OUT1   BRA  OUTCH    ;output LF
                      ;
 F3C9 0F85            CLRHKS CLR  LODFLG-DIRPAG
 F3CB 2004                   BRA  TOHKS0
 
 F3CD 8D51            INCH   BSR  INCHA    ;Input character with echo
 F3CF 8118                   CMPA #$18     ;Has Ctrl-Y been input?
 F3D1 1027FE50        TOHKS0 LBEQ HKS      ;yes, abort to hks
                      ;
                      ;
                      ; Output character to video console.
                      ; If Ctrl-X is entered from keyboard or serial port 
return to HKS
                      ;
 F3D5 3402            OUTA   PSHS A
 F3D7 BDF46B                 JSR  TSTINP   ;Input from video console?
 F3DA 2404                   BCC  OUTCH0   ;no, continue
 F3DC 8118                   CMPA #$18     ;Is it Ctrl-X?
 F3DE 27E9                   BEQ  CLRHKS   ;yes, abort to hks
                      ;
 F3E0 8D31            OUTCH0 BSR  TSTINS   ;Input from serial port?
 F3E2 2404                   BCC  OUTCH1   ;no, continue
 F3E4 8118                   CMPA #$18     ;Is it Ctrl-X?
 F3E6 27E1                   BEQ  CLRHKS   ;yes, abort to hks
                      ;
 F3E8 3502            OUTCH1 PULS A
 F3EA 7DEF85          OUTCH  TST  LODFLG
 F3ED 10260244               LBNE XDTEXT
 F3F1 7DEF86                 TST  SERPAR   ;Is Serial or parallel Output?
 F3F4 1027023D               LBEQ XDTEXT   ;out parallel
                      ;
                      ;
                      ; Output Character to serial port
                      ;
 F3F8 3404            OUTCHS PSHS B
 F3FA F6FCF4          OUTCS1 LDB  ACIACO
 F3FD C502                   BITB #2       ;Transmit not ready
 F3FF 27F9                   BEQ  OUTCS1
 F401 B7FCF5                 STA  ACIADA   ;output character
 F404 3584                   PULS PC,B
                      ;
                      ; Get status of serial port
                      ;
 F406 3402            SERSTA PSHS A
 F408 B6FCF4                 LDA  ACIACO
 F40B 8401                   ANDA #%00000001
 F40D 3582                   PULS A,PC
 
 F40F 8DF5            LOAD0  BSR  SERSTA
 F411 26FC                   BNE  LOAD0    ;loop until got input from
                                           ;serial port
                      ;
                      ; Input one Character from ACIA
                      ;
 F413 8DF1            TSTINS BSR  SERSTA   ;get serial status
 F415 2706                   BEQ  NOSERI   ;nothing there
 F417 B6FCF5                 LDA  ACIADA
 F41A 1A01                   ORCC #%00000001 ;SEC, Carry setzen
 F41C 39                     RTS
 F41D 1CFE            NOSERI ANDCC #%11111110 ;CLC
 F41F 39                     RTS
                      ;
                      ; Input one Character
                      ;
 F420 7DEF5B          INCHA  TST  CURSOR   ;is cursor visible?
 F423 2621                   BNE  INOCUR   ;yes, jump
 F425 B6EF0E                 LDA  INVFLG
 F428 3402                   PSHS A
 F42A 8D12                   BSR  ESCOUT
 F42C 7FEF0E                 CLR  INVFLG
 F42F 8D0D                   BSR  ESCOUT
 F431 8D13                   BSR  INOCUR
 F433 8D09                   BSR  ESCOUT
 F435 3402                   PSHS A
 F437 A661                   LDA  1,S
 F439 B7EF0E                 STA  INVFLG   ;restore old value of INVFLG
 F43C A6E1                   LDA  ,S++     ;repeat input, make stack ok
 F43E 3402            ESCOUT PSHS A
 F440 861B                   LDA  #$1B
 F442 8DA6                   BSR  OUTCH
 F444 3582                   PULS A,PC
                      ;
                      ; Input without changing cursor
                      ;
 F446 8D1E            INOCUR BSR  TSTIN
 F448 24FC                   BCC  INOCUR
 F44A 39                     RTS
 
 F44B 7DEF86          STATUS TST  SERPAR
 F44E 26B6                   BNE  SERSTA   ;check serial status
 F450 3402            PSTATU PSHS A
 F452 7DEF5A                 TST  NEWCHR   ;look for char that has not been 
fetched
 F455 260D                   BNE  NOTEMP   ;found one
 F457 B6FCF1                 LDA  PIA1AC
 F45A 2A06                   BPL  ISEMPT   ;empty
 F45C B6FCF0                 LDA  PIA1AD   ;get char from PIA
 F45F B7EF5A                 STA  NEWCHR   ;and save it
 F462 1A04            ISEMPT ORCC #%00000100  ;set ZERO Flag
 F464 3582            NOTEMP PULS A,PC
                      ;
                      ; Input one Character from PIA
                      ;
 F466 B6EF86          TSTIN  LDA  SERPAR   ;input from serial port?
 F469 26A8                   BNE  TSTINS   ;yes, check ACIA
                      ;
 F46B 8DE3            TSTINP BSR  PSTATU   ;check parallel only
 F46D 2603                   BNE  INPPAR   ;found something
 F46F 1CFE                   ANDCC #%11111110 ;CLC
 F471 39                     RTS           ;else return
                      ;
 F472 B6EF5A          INPPAR LDA  NEWCHR   ;get character
 F475 7FEF5A                 CLR  NEWCHR   ;and clear status
                      ;
 F478 8119            CNVERT CMPA #$19     ;Ctrl-Y
 F47A 271B                   BEQ  TRANS1   ;Toggle upper/lower case
 F47C 7DEF8B                 TST  UL
 F47F 2713                   BEQ  TRANS2   ;Uppercase only?
 F481 8161            LOWUP  CMPA #'a'     ;Yes
 F483 250F                   BCS  TRANS2   ;lower than a
 F485 817D                   CMPA #'}'     ;
 F487 240B                   BCC  TRANS2   ;higher than }
 F489 7DEF59                 TST  DEUTSC
 F48C 2604                   BNE  DO_CNV   ;if german convert now
 F48E 817B                   CMPA #'{'
 F490 2402                   BCC  TRANS2   ;if ASCII {|} not
 F492 84DF            DO_CNV ANDA #%11011111
 F494 1A01            TRANS2 ORCC #%00000001 ;SEC, set carry
 F496 39                     RTS
                      ;
 F497 73EF8B          TRANS1 COM  UL       ;Toggle
 F49A 20F8                   BRA  TRANS2
                      ;
                      ;
                      ; Input 4 HEX-Character
                      ;
 F49C 3410            IN4HX0 PSHS X          ;for Motorola comp.
 F49E 5F                     CLRB
 F49F 8D10                   BSR  IN4HX      ;Get 4 HEX-Char.
 F4A1 250C                   BCS  NONHEX
 F4A3 1F10                   TFR  X,D
 F4A5 3510                   PULS X
 F4A7 ED84                   STD  ,X
 F4A9 C604                   LDB  #$04
 F4AB BDF3CD                 JSR  INCH
 F4AE 39                     RTS
                      ;
 F4AF 3590            NONHEX PULS PC,X
                      ;
 F4B1 8D11            IN4HX  BSR  BYTE       ;input upper byte
                      ;
 F4B3 250E            IN4HX1 BCS  RAUS       ;input error
 F4B5 3404                   PSHS B          ;push B on stack
 F4B7 1F89                   TFR  A,B        ;Move A to B
 F4B9 8D09                   BSR  BYTE       ;input lower byte
 F4BB 2504                   BCS  RAUS1      ;input error
 F4BD 1E89                   EXG  A,B        ;upper byte in A,
 F4BF 1F01                   TFR  D,X        ;lower byte in B => X
                      ;
 F4C1 3504            RAUS1  PULS B          ;Restore B
 F4C3 39              RAUS   RTS
                      ;
 F4C4 8D13            BYTE   BSR  INHEX      ;input hex digit
                      ;
 F4C6 25FB            BYTE0  BCS  RAUS       ;input error
 F4C8 48              BYTE1  ASLA            ;shift hex digit to
 F4C9 48                     ASLA            ;upper nibble
 F4CA 48                     ASLA
 F4CB 48                     ASLA
 F4CC B7EF84                 STA  TEMPA      ;store into TEMPA
 F4CF 8D08                   BSR  INHEX      ;input second hex digit
 F4D1 25F0                   BCS  RAUS       ;input error
 F4D3 BBEF84                 ADDA TEMPA      ;join 1st and 2nd digit
 F4D6 1CFE                   ANDCC #%11111110 ;CLC
 F4D8 39                     RTS
                      ;
 F4D9 BDF3CD          INHEX  JSR  INCH        ;get character
                      ;;
 F4DC 8130            INHEX1 CMPA #'0'        ;---
 F4DE 2BB4                   BMI  TRANS2      ;between 0 - 9 ?
 F4E0 8139                   CMPA #'9'        ;---
 F4E2 2F0C                   BLE  IN1HG
 F4E4 84DF                   ANDA #%11011111  ;lower -> upper case
 F4E6 8141                   CMPA #'A'        ;---
 F4E8 2BAA                   BMI  TRANS2      ;between A - F ?
 F4EA 8146                   CMPA #'F'        ;---
 F4EC 2EA6                   BGT  TRANS2
 F4EE 8007                   SUBA #$07
 F4F0 840F            IN1HG  ANDA #$0F
 F4F2 1CFE                   ANDCC #%11111110 ;CLC, no input error
 F4F4 39                     RTS
                      ;
                      ; Entry point after a breakpoint
                      ; (or Single-Step-Interrupt)
                      ;
 F4F5 6D6B            SWIENT TST  11,S       ;Programm-Counter
 F4F7 2602                   BNE  SWIEN0     ;due to SWI
 F4F9 6A6A                   DEC  10,S       ;1 Byte
                      ;
 F4FB 6A6B            SWIEN0 DEC  11,S       ;back again
 F4FD AE6A                   LDX  10,S       ;Breakpoint address
 F4FF 2003                   BRA  IRQEN0     ;yes, output register
                      ;
 F501 8E0000          IRQENT LDX  #0
                      ;
 F504 863E            IRQEN0 LDA  #%00111110
 F506 B7FCF3                 STA  PIA1BC
 F509 B6FCF2                 LDA  PIA1BD
 F50C 86EF                   LDA  #DRCTPG
 F50E 1F8B                   TFR  A,DP
 F510 10DF7C                 STS  SAVUST-DIRPAG
 F513 10CEEF00               LDS  #STACK
 F517 8D03            IRQEN1 BSR  OUTREG
 F519 16FD09                 LBRA HKS
                      ;
                      ; Function to output register values
                      ;
 F51C 8EF0B6          OUTREG LDX  #TREGIS    ;load text pointer
 F51F DE7C                   LDU  SAVUST-DIRPAG
 F521 8602                   LDA  #2         ;2 one byte registers
 F523 8D0C                   BSR  FOUREG
 F525 4F                     CLRA
 F526 8D09                   BSR  FOUREG
 F528 BDF3B7                 JSR  PDATA1
 F52B 8EEF7C                 LDX  #SAVUST
 F52E 16FE7C                 LBRA OUT4HX
                      ;
 F531 C604            FOUREG LDB  #$04
 F533 3406            FOURE0 PSHS B,A
 F535 C602                   LDB  #$02
 F537 8D06                   BSR PRIREG
 F539 3506                   PULS B,A
 F53B 5A                     DECB
 F53C 26F5                   BNE  FOURE0
 F53E 39                     RTS
                      ;
                      ; Function to output one register value
                      ;
 F53F 108EF3B5        PRIREG LDY  #PDATA     ;Pointer to "PDATA"
 F543 ADA5                   JSR  B,Y        ;to PDATA or PDATA1
 F545 1E13                   EXG  X,U        ;register pointer to X
 F547 108EF3AD               LDY  #OUT4HX    ;Pointer to "OUT4HX"
 F54B A662                   LDA  2,S        ;Jump offset in A
 F54D ADA6                   JSR  A,Y        ;to OUT4HX or OUT2HX
 F54F 1E13                   EXG  X,U        ;text pointer to X
 F551 39                     RTS
                      ;
                      ;
                      ; Interrupt entry points
                      ;
 F552 6E9FEF70        SWI3   JMP  [SW3VEC]
 F556 6E9FEF72        SWI2   JMP  [SW2VEC]
 F55A 6E9FEF74        FIRQ   JMP  [FIRQVC]
 F55E 6E9FEF76        IRQ    JMP  [IRQVEC]
 F562 6E9FEF78        SWI    JMP  [SWIVEC]
 F566 6E9FEF7A        NMI    JMP  [NMIVEC]
 
 
                      ;**********************************
                      ; General Table Search            *
                      ;                                 *
                      ; Entry: X - Points to Table      *
                      ;        y - Points to Command    *
                      ;        First Byte of table must *
                      ;        contain item length      *
                      ;        last Byte must be $FF    *
                      ; Exit:  C - Z set if found,      *
                      ;            Clear if not found   *
                      ;        X - Points to adress of  *
                      ;            Routine for match    *
                      ;        A,B -  changed           *
                      ;**********************************
 
 F56A E680            SEARCH LDB  ,X+         ;Get item length
 F56C 8D0A            SERCH1 BSR  COMPAR      ;Compare current item
 F56E 3A                     ABX              ;advance to next item
 F56F 2706                   BEQ  SERCHX      ;exit if match
 F571 3002                   LEAX $02,X       ;step over address
 F573 6D84                   TST  ,X          ;end of table?
 F575 2AF5                   BPL  SERCH1      ;no, again
 F577 39              SERCHX RTS
 
 
                      ;**********************************
                      ; General String Compare          *
                      ;                                 *
                      ; Entry: X - Adress of String 1   *
                      ;        Y - Adress of String 2   *
                      ;        B - Length of Strings    *
                      ;                                 *
                      ; Exit:  C - Set per Compare 1:2  *
                      ;        B,X,Y - unchanged        *
                      ;        A - changed              *
                      ;**********************************
 
 F578 3434            COMPAR PSHS Y,X,B       ;Save Registers
 F57A A680            COMP1  LDA  ,X+         ;get next character
 F57C A1A0                   CMPA ,Y+         ;compare it
 F57E 2603                   BNE  COMPX       ;exit if no match
 F580 5A                     DECB             ;decrement loop count
 F581 26F7                   BNE  COMP1
 F583 35B4            COMPX  PULS PC,Y,X,B    ;Restore registers and return
 
 
 F585 00              DEFTA1  FCB  0
 F586 0A                     FCB  10         ;Lines per character
 F587 01                     FCB  1          ;empty lines 1
 F588 02                     FCB  2          ;empty lines 2
 F589 03                     FCB  3          ;empty lines 3
 F58A 19                     FCB  25         ;lines of char. per line
 F58B 54                     FCB  84         ;Nr. of char. per line
 F58C 00FA                   FDB  250        ;Lines per screen used
 F58E 07                     FCB  7          ;lines per char. in char.set
 F58F 00                     FCB  0          ;Dummy
 F590 06                     FCB  6          ;Character dots horizontal
 F591 00                     FCB  0          ;Set Page to init
 F592 F7C0                   FDB  CTLTAB     ;Controlle table
 F594 FA57                   FDB  CHRTBL     ;Character table
 F596 0C0C                   FDB  SCRN1      ;RAM-Bank for screen
 F598 0808                   FDB  SCRN2      ;dto bei double res.
 F59A F800                   FDB  ESCVEC     ; Escape Vector
 F59C F810                   FDB  ESCTAB     ; Escape Table
 F59E FD7F                   FDB  $FD7F      ;Soft Scroll value ($027F)
 F5A0 00FE                   FDB  BOTOM1     ;Bottom pointer
 F5A2 C000                   FDB  -$4000     ;Bump Vector
 F5A4 00                     FCB  $00
                      ;
                      ;
                      ; Switch Memory Management Unit
                      ; This subroutine switches the RAM in 16K Blocks
                      ; (4K Blocks are possible if only one Byte differs
                      ; from old values)
                      ; Input: X = New  Value of RAM (low)
                      ;        Y = New  Value of RAM (high)
                      ;        B = Low Byte of MMU-Address
                      ;
                      ; Output: X,Y,B changed
                      ;         U,A,CC unchanged
                      ;
 F5A5 3443            SWITCH PSHS U,A,CC
 F5A7 1A50                   ORCC #%01010000  ; SEI
 F5A9 86FF                   LDA  #$FF
 F5AB 3406                   PSHS B,A
 F5AD 3430                   PSHS Y,X
 F5AF FEEFDE                 LDU  SAVE
 F5B2 86EF                   LDA  #DRCTPG
 F5B4 1F01                   TFR  D,X
 F5B6 EC84                   LDD  ,X
 F5B8 10AE02                 LDY  2,X
 F5BB 3636                   PSHU Y,X,D
 F5BD FFEFDE                 STU  SAVE
 F5C0 3526                   PULS Y,D
 F5C2 ED84                   STD  ,X
 F5C4 10AF02                 STY  2,X
 F5C7 3510                   PULS X
 F5C9 ED84                   STD  ,X
 F5CB 10AF02                 STY  2,X
 F5CE 35C3                   PULS PC,U,A,CC
                      ;
                      ; Switch back Memory Management Unit
                      ; This is a subroutine to switch back to
                      ; the original contents of the MMU
                      ; revers of switch subroutine
                      ;
                      ; Input: No
                      ; Output: X,Y,B as the input of the subr. switch
                      ;
 F5D0 3443            SWTCHB PSHS U,A,CC
 F5D2 1A50                   ORCC #$50
 F5D4 FEEFDE                 LDU  SAVE
 F5D7 3736                   PULU Y,X,D
 F5D9 FFEFDE                 STU  SAVE
 F5DC ED84                   STD  ,X
 F5DE 10AF02                 STY  2,X
 F5E1 1E01                   EXG  D,X
 F5E3 86FF                   LDA  #$FF
 F5E5 1E01                   EXG  D,X
 F5E7 ED84                   STD  ,X
 F5E9 10AF02                 STY  2,X
 F5EC 1E01                   EXG  D,X
 F5EE 35C3                   PULS PC,U,A,CC
                      ;
                      ; INTSCR initializes the screen on single
                      ; resolution.
                      ; It clears the screen and sets up the
                      ; base registers.
                      ;
 F5F0 8EF585          INTSCR LDX  #DEFTA1
 F5F3 CEEF31          INTSC1  LDU  #NRLINS-1
 F5F6 108E0011               LDY  #LPCNT
 F5FA EC81            SETUP  LDD  ,X++
 F5FC EDC1                   STD  ,U++
 F5FE 313F                   LEAY -$01,Y
 F600 26F8                   BNE  SETUP
 F602 963D                   LDA  INTPAG-DIRPAG
 F604 5F                     CLRB             ;reset scrolling
 F605 FDFCF6                 STD  VIDPAG
 F608 48                     LSLA
 F609 48                     LSLA
 F60A 48                     LSLA
 F60B 48                     LSLA
 F60C 8B40                   ADDA #$40
 F60E DD03                   STD  DBASE-DIRPAG
 F610 CC01F8                 LDD  #PIXLIN
 F613 DD09                   STD  EOLNX-DIRPAG
 F615 0F0E                   CLR  INVFLG-DIRPAG
 F617 0A0E                   DEC  INVFLG-DIRPAG   ;wir wollen keinen Cursor
 F619 0F5B                   CLR  CURSOR-DIRPAG    ; und haben auch noch 
keinen
 F61B 0F0B                   CLR  SCROFS-DIRPAG
 F61D DC4C                   LDD  XBOTOM-DIRPAG
 
 
 F61F 9338                   SUBD SCRLIN-DIRPAG
 F621 F3EF31                 ADDD NRLINS-1
 F624 DD0C                   STD  BOTTOM-DIRPAG
 F626 DC4C                   LDD  XBOTOM-DIRPAG
 F628 DD07                   STD  YADDR-DIRPAG
 F62A 4F                     CLRA
 F62B 5F                     CLRB
 F62C DD05                   STD  XADDR-DIRPAG
 F62E DD01                   STD  INSRTF-DIRPAG
 F630 86FF                   LDA  #$FF
 F632 9718                   STA  COLTAB-DIRPAG
 F634 39                     RTS
                      ;
                      ;
                      ; DTEXT functions as an intelligent terminal
                      ; on entry register A must contain a valid
                      ; ASCII character.
                      ; It will be drawn on the screen with complete
                      ; updating of the cursor after drawing.
                      ; it writes the characters in 25 lines of
                      ; 84 characters.
                      ; Scrolling is provided if the bottom character
                      ; line is reached.
                      ; All registers are saved.
                      ;
 F635 347F            XDTEXT PSHS U,Y,X,DP,B,A,CC  ;Save Registers
 F637 1A50                   ORCC #%01010000 ;SEI
 F639 C6EF                   LDB  #DRCTPG
 F63B 1F9B                   TFR  B,DP
 F63D 0D10                   TST  NEWST2-DIRPAG    ; Already switched the 
stack
 F63F 260B                   BNE  DTEXT4     ; yes, so go on
 F641 10DF11                 STS  SAVEST-DIRPAG    ; save user stack
 F644 10CEEE40               LDS  #STACK2    ;get new internal stack
 F648 0C10                   INC  NEWST2-DIRPAG    ; set flag
 F64A 2002                   BRA  DTEXT5
 F64C 0C0F            DTEXT4 INC  NEWST1-DIRPAG    ; set flag
 F64E A7E4            DTEXT5 STA  ,S         ;save it
 F650 9E42                   LDX  SCREN1-DIRPAG
 F652 1F12                   TFR  X,Y
 F654 C6E0                   LDB  #$E0
 F656 BDF5A5                 JSR  SWITCH
 F659 9E44                   LDX  SCREN2-DIRPAG   ; select second screen
 F65B 1F12                   TFR  X,Y
 F65D C6E4                   LDB  #$E4
 F65F BDF5A5                 JSR  SWITCH
 F662 A6E4                   LDA  ,S
 F664 0D02                   TST  ESCFLG-DIRPAG    ; Escape sequence?
 F666 102600FE               LBNE ESCSEQ     ;yes, do sequence
 F66A 847F                   ANDA #$7F       ;only 7 bit
 F66C A7E4                   STA  ,S         ;store it
 F66E BDFEC5                 JSR  INVCUR     ;clear cursor
 F671 8120                   CMPA #$20       ;control code?
 F673 102500EA               LBCS DTEXTC     ; yes, to control codes
 F677 A6E4            ZF850  LDA  ,S         ;get value back
 F679 BDFDBA                 JSR  XDCHAR     ;draw character
 F67C DC05            COLOR2 LDD  XADDR-DIRPAG    ; update cursor adress
 F67E F3EF3B                 ADDD CHROFS-1
 F681 DD05                   STD  XADDR-DIRPAG
 F683 109309                 CMPD EOLNX-DIRPAG     ;End of line?
 F686 2507                   BCS  DTEXT8     ;yes, store it
 F688 4F                     CLRA            ;Reset X-coordinate
 F689 5F                     CLRB;
 F68A DD05                   STD  XADDR-DIRPAG
 F68C 1601C1                 LBRA LF
 F68F BDFEC5          DTEXT8 JSR  INVCUR     ;display cursor again
 F692 BDF5D0          DTEXT3 JSR  SWTCHB
 F695 BDF5D0                 JSR  SWTCHB
 F698 0D0F                   TST  NEWST1-DIRPAG
 F69A 2607                   BNE  DTEXT6     ;internal stack still using
 F69C 0F10                   CLR  NEWST2-DIRPAG    ;reset flag
 F69E 10DE11                 LDS  SAVEST-DIRPAG    ;user stack back
 F6A1 35FF            DTEXT7 PULS PC,U,Y,X,DP,B,A,CC  ;restore registers
                      ;
 F6A3 0F0F            DTEXT6 CLR  NEWST1-DIRPAG   ; reset flag
 F6A5 20FA                   BRA  DTEXT7      ;exit
 
 F6A7 0F0E            CURSON CLR  INVFLG-DIRPAG
 F6A9 0D5B                   TST  CURSOR-DIRPAG
 F6AB 27E2                   BEQ  DTEXT8      ;Cursor is off
 F6AD 20E3                   BRA  DTEXT3
 F6AF 0D5B            CURSOF TST  CURSOR-DIRPAG
 F6B1 2705                   BEQ  ISOFF       ;Cursor is already off
 F6B3 0F0E                   CLR  INVFLG-DIRPAG
 F6B5 BDFEC5                 JSR  INVCUR      ;otherwise delete it
 F6B8 8601            ISOFF  LDA  #1
 F6BA 970E                   STA  INVFLG-DIRPAG
 F6BC 20D4                   BRA  DTEXT3
 
 F6BE 86FF            INVON  LDA  #$FF
 F6C0 B7EF58          SETINV STA  HIGHLI
 F6C3 20CA                   BRA  DTEXT8
 F6C5 4F              INVOFF CLRA
 F6C6 20F8                   BRA  SETINV
 
 F6C8 86FF            DEUON  LDA  #$FF
 F6CA B7EF59          DEU    STA  DEUTSC
 F6CD 20C0                   BRA  DTEXT8
 F6CF 4F              DEUOFF CLRA
 F6D0 20F8                   BRA  DEU
 
 F6D2 8D24            SCRLUP BSR  SCROLL    ;scroll up
 F6D4 20B9                   BRA  DTEXT8
 
 F6D6 9E03            SCRUD  LDX  DBASE-DIRPAG
 F6D8 308B                   LEAX D,X
 F6DA 960B                   LDA  SCROFS-DIRPAG
 F6DC 3402                   PSHS A
 F6DE C680                   LDB  #$80      ;compute row offset
 F6E0 3D                     MUL
 F6E1 308B                   LEAX D,X       ;address of row
 F6E3 33890080               LEAU $0080,X   ;end pointer (end of line)
 F6E7 4F                     CLRA
 F6E8 BDF8DA                 JSR  CLEARS    ;and clear
 F6EB 0D4A                   TST  SOFT-DIRPAG
 F6ED 2B07                   BMI  SCRUD2
 F6EF 9E4A                   LDX  SOFT-DIRPAG      ; SCROLL delay
 F6F1 3D              SCRUD1 MUL
 F6F2 301F                   LEAX -$01,X
 F6F4 26FB                   BNE  SCRUD1
 F6F6 3582            SCRUD2 PULS A,PC
                      ;
                      ; Scroll does the processing to scroll the
                      ; screen.
                      ;
 F6F8 10BEEF31        SCROLL LDY  NRLINS-1   ;Number of lines to scroll
 F6FC 3420            SCROL1 PSHS Y
 F6FE FCEF4E                 LDD  BUMPV      ;other side of the screen
 F701 8DD3                   BSR  SCRUD
 F703 3520                   PULS Y
 F705 4C                     INCA            ;increm offset
 F706 847F                   ANDA #$7F
 F708 970B                   STA  SCROFS-DIRPAG
 F70A 48              SCROL7 ASLA
 F70B B7FCF7          SCROL4 STA  BILANF    ;actual scroll
 F70E 313E                   LEAY -$02,Y     ;all lines done ?
 F710 26EA                   BNE  SCROL1     ;no
 F712 DC07                   LDD  YADDR-DIRPAG     ;else update variables
 F714 B3EF31                 SUBD NRLINS-1
 F717 2C02                   BGE  SCROL8
 F719 9638                   LDA  SCRLIN-DIRPAG
 F71B DD07            SCROL8 STD  YADDR-DIRPAG
 F71D DC0C                   LDD  BOTTOM-DIRPAG
 F71F B3EF31                 SUBD NRLINS-1
 F722 2C02                   BGE  SCROL9
 F724 9638                   LDA  SCRLIN-DIRPAG
 F726 DD0C            SCROL9 STD  BOTTOM-DIRPAG
 F728 39                     RTS
 
 F729 10BEEF31        SCROLD LDY  NRLINS-1   ;Number of lines to scroll
 F72D 3420            LF882  PSHS Y
 F72F B6EF0B                 LDA  SCROFS
 F732 8004                   SUBA #4         ;erst mal 4 abziehen, um richtig 
zu loeschen
 F734 847F                   ANDA #$7F
 F736 970B                   STA  SCROFS-DIRPAG
 F738 FCEF4E                 LDD  BUMPV      ;other side of the screen
 F73B 8D99                   BSR  SCRUD
 F73D 8B03                   ADDA #3         ;nun wieder 3 dazu, bleibt -1
 F73F B7EF0B                 STA  SCROFS
 F742 3520                   PULS Y
 F744 48              LF8B5  ASLA
 F745 B7FCF7          LF8B6  STA  BILANF     ;actual scroll
 F748 313E                   LEAY -$02,Y     ;all lines done ?
 F74A 26E1                   BNE  LF882      ;no
 F74C DC07                   LDD  YADDR-DIRPAG     ;else update variables
 F74E F3EF31                 ADDD NRLINS-1
 F751 4F                     CLRA
 F752 DD07            LF8C5  STD  YADDR-DIRPAG
 F754 DC0C                   LDD  BOTTOM-DIRPAG
 F756 F3EF31                 ADDD NRLINS-1
 F759 10B3EF38               CMPD SCRLIN
 F75D 4F                     CLRA
 F75E DD0C            LF8CF  STD  BOTTOM-DIRPAG
 F760 39                     RTS
 
 F761 9E3E            DTEXTC LDX  CTLTA-DIRPAG
 F763 A6E4                   LDA  ,S
 F765 48                     ASLA
 F766 6E96                   JMP  [A,X]
 F768 0A02            ESCSEQ DEC  ESCFLG-DIRPAG
 F76A 260D                   BNE  ESCSE1
 F76C 9E48                   LDX  ESCTBL-DIRPAG
 F76E 31E4                   LEAY ,S
 F770 BDF56A                 JSR  SEARCH
 F773 1026FF18               LBNE DTEXT8
 F777 6E94                   JMP  [,X]
 F779 D602            ESCSE1 LDB  ESCFLG-DIRPAG
 F77B 5A                     DECB
 F77C 9E46                   LDX  ESCVC-DIRPAG
 F77E 6E95                   JMP  [B,X]
 
 F780 F68F            CTABHO FDB  DTEXT8    ;0
 F782 F68F                   FDB  DTEXT8    ;1
 F784 F68F                   FDB  DTEXT8    ;2
 F786 F68F                   FDB  DTEXT8    ;3
 F788 F68F                   FDB  DTEXT8    ;4
 F78A F6AF                   FDB  CURSOF    ;5
 F78C F68F                   FDB  DTEXT8    ;6
 F78E F902                   FDB  BELL      ;Bell
 F790 F68F                   FDB  DTEXT8    ;8
 F792 F68F                   FDB  DTEXT8    ;9
 F794 F850                   FDB  LF        ;LF
 F796 F8B8                   FDB  DC2       ;CURSOR Down
 F798 F883                   FDB  FF        ;CLS
 F79A F86D                   FDB  CR        ;CR
 F79C F6D2                   FDB  SCRLUP    ;scroll up
 F79E F84B                   FDB  SCRDWN    ;scroll down
 
 F7A0 F68F                   FDB  DTEXT8    ;^P
 F7A2 F8A2                   FDB  DC1       ;^Q
 F7A4 F8B8                   FDB  DC2       ;^R
 F7A6 F8C1                   FDB  DC3       ;^S
 F7A8 F8CF                   FDB  DC4       ;^T
 F7AA F6A7                   FDB  CURSON    ;^U
 F7AC F68F                   FDB  DTEXT8    ;^V
 F7AE F68F                   FDB  DTEXT8    ;^W
 F7B0 F8C1                   FDB  DC3       ;^X CURSOR RIGHT
 F7B2 F8CF                   FDB  DC4       ;^Y CURSOR LEFT
 F7B4 F8A2                   FDB  DC1       ;^Z CURSOR UP
 F7B6 FF58                   FDB  ESCAPE
 F7B8 F8FE                   FDB  SOFTSC    ; SOFT/HARD=(HOME DOWN)
 F7BA F868                   FDB  HOME      ;CURSOR HOME
 F7BC FF6E                   FDB  ERAEOL    ;1E
 F7BE FF93                   FDB  ERAEOS    ;1F
 
 F7C0 F68F            CTLTAB FDB  DTEXT8    ;0
 F7C2 F68F                   FDB  DTEXT8    ;1
 F7C4 F68F                   FDB  DTEXT8    ;2
 F7C6 F68F                   FDB  DTEXT8    ;3
 F7C8 F68F                   FDB  DTEXT8    ;4
 F7CA F6AF                   FDB  CURSOF    ;5
 F7CC F68F                   FDB  DTEXT8    ;6
 F7CE F902                   FDB  BELL      ;Bell
 F7D0 F873                   FDB  BS        ;BS
 F7D2 F68F                   FDB  DTEXT8    ;9
 F7D4 F850                   FDB  LF        ;LF
 F7D6 F68F                   FDB  DTEXT8    ;B
 F7D8 F883                   FDB  FF        ;CLS
 F7DA F86D                   FDB  CR        ;CR
 F7DC F6D2                   FDB  SCRLUP    ;scroll up
 F7DE F84B                   FDB  SCRDWN    ;scroll down
 
 F7E0 F68F                   FDB  DTEXT8    ;10
 F7E2 F8A2                   FDB  DC1
 F7E4 F8B8                   FDB  DC2
 F7E6 F8C1                   FDB  DC3
 F7E8 F8CF                   FDB  DC4
 F7EA F6A7                   FDB  CURSON    ;15
 F7EC F68F                   FDB  DTEXT8    ;16
 F7EE F68F                   FDB  DTEXT8    ;17
 F7F0 F68F                   FDB  DTEXT8    ;18
 F7F2 F68F                   FDB  DTEXT8    ;19
 F7F4 F68F                   FDB  DTEXT8    ;1A
 F7F6 FF58                   FDB  ESCAPE
 F7F8 F868                   FDB  HOME      ;CURSOR HOME
 F7FA F8FE                   FDB  SOFTSC
 F7FC F68F                   FDB  DTEXT8    ;1E
 F7FE F68F                   FDB  DTEXT8    ;1F
                      ;
 F800 F934            ESCVEC FDB  LCURS1
 F802 F953                   FDB  LCURS2
 F804 F95E                   FDB  PDOTX1
 F806 F964                   FDB  PDOTX2
 F808 F96B                   FDB  PDOTY1
 F80A F971                   FDB  PDOTY2
 F80C F941                   FDB  SETCUX    ;alternative Cursor-Positioning
 F80E F93D                   FDB  SETCUY
                      ;
                      ; Escape table
                      ;
 F810 01              ESCTAB FCB  1         ; Nr. of characters to check
 F811 41                     FCC  "A"       ; Plot dot even
 F812 F95A                   FDB  PEVEN
 F814 42                     FCC  "B"       ; delete line
 F815 F9CD                   FDB  DELLIN
 F817 43                     FCC  "C"       ; insert line 
 F818 F98D                   FDB  INSLIN
 F81A 44                     FCC  "D"
 F81B F6C8                   FDB  DEUON     ; german characterset
 F81D 45                     FCC  "E"
 F81E F982                   FDB  SPCURS    ; Cursorpositioning YX
 F820 46                     FCC  "F"
 F821 FF61                   FDB  INSCUR    ; Use an insert Cursor
 F823 47                     FCC  "G"
 F824 FF5E                   FDB  OVRCUR    ; Use an overwrite Cursor 
(default)
 F826 49                     FCC  "I"
 F827 F6CF                   FDB  DEUOFF    ; International characterset
 F829 3D                     FCC  "="
 F82A F989                   FDB  CURPS2    ; Cursorpositioning XY
 F82C 50                     FCC  "P"
 F82D F6BE                   FDB  INVON     ; INVerse ON
 F82F 51                     FCC  "Q"
 F830 F6C5                   FDB  INVOFF    ; INVerse OFF
 F832 4B                     FCC  "K"
 F833 FF6E                   FDB  ERAEOL    ; ERAse to End Of Line
 F835 5A                     FCC  "Z"
 F836 FF93                   FDB  ERAEOS    ; ERAse to End Of Screen
 F838 70                     FCC  "p"
 F839 F6BE                   FDB  INVON     ; INVerse ON
 F83B 71                     FCC  "q"
 F83C F6C5                   FDB  INVOFF    ; INVerse OFF
 F83E 4B                     FCC  "K"
 F83F FF6E                   FDB  ERAEOL    ; ERAse to End Of Line
 F841 4C                     FCC  "L"
 F842 FF6E                   FDB  ERAEOL
 F844 6B                     FCC  "k"
 F845 FF93                   FDB  ERAEOS    ; ERAse to End Of Screen
 F847 53                     FCC  "S"
 F848 FF93                   FDB  ERAEOS
 F84A FF                     FCB  $FF
 
 F84B BDF729          SCRDWN JSR  SCROLD
 F84E 2015                   BRA  LF2       ;display Cursor usw.
 
 F850 DC07            LF     LDD  YADDR-DIRPAG     ;update Y-coordinate
 F852 10930C                 CMPD BOTTOM-DIRPAG    ;bottom of screen?
 F855 2605                   BNE  LF3        ;No, store new Y-coordinate
 F857 BDF6F8                 JSR  SCROLL     ;else scroll the page
 F85A 2009                   BRA  LF2        ;and finish
 F85C B3EF31          LF3    SUBD NRLINS-1
 F85F 2C02                   BGE  LF1
 F861 9638                   LDA  SCRLIN-DIRPAG
 F863 DD07            LF1    STD  YADDR-DIRPAG     ;store Y-coordinate
 F865 16FE27          LF2    LBRA DTEXT8     ;main exit
 
 F868 8620            HOME   LDA  #$20
 F86A BDF91B                 JSR  LCUR11     ;Y-Koordinate to 0
 
 F86D 4F              CR     CLRA            ;reset X-coordinate
 F86E 5F                     CLRB
 F86F DD05                   STD  XADDR-DIRPAG
 F871 20F2                   BRA  LF2        ;and draw new cursor
 
 F873 DC05            BS     LDD  XADDR-DIRPAG
 F875 27EE                   BEQ  LF2        ;skip if already zero
 F877 B3EF3B                 SUBD CHROFS-1   ;do backspace
 F87A DD05                   STD  XADDR-DIRPAG
 F87C 8620                   LDA  #$20       ;erase char. by a space
 F87E BDFDBA                 JSR  XDCHAR
 F881 20E2                   BRA  LF2
 
 F883 DE03            FF     LDU  DBASE-DIRPAG     ;get display base
 F885 DC4E                   LDD  BUMPV-DIRPAG
 F887 30CB                   LEAX D,U        ;compute end address
 F889 4F                     CLRA            ;set nulls
 F88A 8D4E                   BSR  CLEARS     ;now clear screen
 F88C DD05                   STD  XADDR-DIRPAG     ;reset X-coordinate
 F88E F7FCF7                 STB  BILANF    ;clear offset latch
 F891 0F0B                   CLR  SCROFS-DIRPAG
 F893 DC4C                   LDD  XBOTOM-DIRPAG
 F895 9338                   SUBD SCRLIN-DIRPAG
 F897 F3EF31                 ADDD NRLINS-1
 F89A DD0C                   STD  BOTTOM-DIRPAG
 F89C DC4C                   LDD  XBOTOM-DIRPAG
 F89E DD07                   STD  YADDR-DIRPAG     ;and setup new Y-coorinate
 F8A0 20C3                   BRA  LF2        ;go invert and return
 
 F8A2 DC0C            DC1    LDD  BOTTOM-DIRPAG    ;check for top of screen
 F8A4 D338                   ADDD SCRLIN-DIRPAG    ;B now contains top
 F8A6 9438                   ANDA SCRLIN-DIRPAG
 F8A8 3406                   PSHS D          ;save it
 F8AA DC07                   LDD  YADDR-DIRPAG     ;adjust Y-coordinate
 F8AC F3EF31                 ADDD NRLINS-1
 F8AF 9438                   ANDA SCRLIN-DIRPAG
 F8B1 10A3E1                 CMPD ,S++       ;compare to actual
 F8B4 27AF                   BEQ  LF2
 F8B6 20AB                   BRA  LF1
 
 F8B8 DC07            DC2    LDD  YADDR-DIRPAG     ;adjust Y-coordinate
 F8BA 10930C                 CMPD BOTTOM-DIRPAG    ;Bottom reached?
 F8BD 27A6                   BEQ  LF2
 F8BF 209B                   BRA  LF3
 
 F8C1 DC05            DC3    LDD  XADDR-DIRPAG     ;adjust X-coord.
 F8C3 F3EF3B                 ADDD CHROFS-1   ;position on new character
 F8C6 109309                 CMPD EOLNX-DIRPAG     ;end of line?
 F8C9 249A                   BCC  LF2        ;yes, do nothing
 F8CB DD05                   STD  XADDR-DIRPAG     ;else store it
 F8CD 2096                   BRA  LF2        ;and draw new cursor
 
 F8CF DC05            DC4    LDD  XADDR-DIRPAG     ;adjust X-coordinate
 F8D1 2792                   BEQ  LF2        ;exit if already on the left
 F8D3 B3EF3B                 SUBD CHROFS-1
 F8D6 DD05                   STD  XADDR-DIRPAG
 F8D8 208B            LF21   BRA  LF2        ;and draw new position
                      ;
                      ; Clear of fill subroutine modulo 16 byte
                      ; Input: A= fill character
                      ;        X= Low address
                      ;        U= High adress + 1
                      ; Output: B,Y,U changed
                      ;
 F8DA 3410            CLEARS PSHS X
 F8DC 1F89                   TFR  A,B
 F8DE 1F01                   TFR  D,X
 F8E0 1F02                   TFR  D,Y
 F8E2 3636            CLEA1  PSHU Y,X,B,A   ;---
 F8E4 3636                   PSHU Y,X,B,A   ;Clear 16 Byte
 F8E6 3616                   PSHU X,B,A     ;---
 F8E8 11A3E4                 CMPU ,S        ;Finish ?
 F8EB 26F5                   BNE  CLEA1     ;no, again
 F8ED 3590                   PULS PC,X
 
                      ; Copy one rasterline (64 Byte)
                      ; Input: X = Source-Addr
                      ;        U = Dest-Addr
                      ; Output: X,U changed
                      ;
 F8EF 3422            COPYL  PSHS A,Y
 F8F1 8620                   LDA  #32
 F8F3 10AE81          COPYL1 LDY  ,X++
 F8F6 10AFC1                 STY  ,U++
 F8F9 4A                     DECA
 F8FA 26F7                   BNE  COPYL1
 F8FC 35A2                   PULS A,Y,PC
                              
 F8FE 034A            SOFTSC COM  SOFT-DIRPAG      ;compl. flag
 F900 2017                   BRA  BELL2      ;and back
 
 F902 F6FCFA          BELL   LDB  PIA2BD   ;get data register
 F905 3404                   PSHS B         ;save value
 F907 CA40                   ORB  #%1000000 ;set Bell bit
 F909 F7FCFA                 STB  PIA2BD   ;Store it
 F90C 8E1770                 LDX  #6000     ;Preset Counter
 F90F 3D              BELL1  MUL            ;Delay
 F910 301F                   LEAX -1,X      ;Decrement
 F912 26FB                   BNE  BELL1
 F914 3504                   PULS B         ;Get old value
 F916 F7FCFA                 STB  PIA2BD   ;no bell now
 F919 20BD            BELL2  BRA  LF21
 
 F91B 8020            LCUR11 SUBA #$20      ;calculate Y coordinate
 F91D 9136                   CMPA LINES-DIRPAG
 F91F 2412                   BCC  ZFA0F
 F921 D632                   LDB  NRLINS-DIRPAG
 F923 3D                     MUL
 F924 9338                   SUBD SCRLIN-DIRPAG
 F926 50                     NEGB
 F927 8900                   ADCA #$00
 F929 40                     NEGA
 F92A D30C                   ADDD BOTTOM-DIRPAG
 F92C B3EF31                 SUBD NRLINS-1
 F92F 9438                   ANDA SCRLIN-DIRPAG
 F931 DD07                   STD  YADDR-DIRPAG
 F933 39              ZFA0F  RTS
                      ;
                      ; LCURS1 and LCURS2 process the escape
                      ; sequence to load the cursor at an
                      ; absolute line and character position
                      ;
 F934 8DE5            LCURS1 BSR  LCUR11
 F936 8604                   LDA  #$04
 F938 9702            MORCUP STA  ESCFLG-DIRPAG
 F93A 16FD55                 LBRA DTEXT3
 F93D 8DDC            SETCUY BSR  LCUR11
 F93F 2014                   BRA  ENDCUP    ;Cursorposition finished
 F941 8D04            SETCUX BSR  LCUR21
 F943 8610                   LDA  #16
 F945 20F1                   BRA  MORCUP    ;loop, sequence not yet finished
 
 F947 8020            LCUR21 SUBA #$20      ;calculate X coordinate
 F949 9137                   CMPA NRCHR-DIRPAG
 F94B 2205                   BHI  ZFA21
 F94D D63C                   LDB  CHROFS-DIRPAG
 F94F 3D                     MUL
 F950 DD05                   STD  XADDR-DIRPAG
 F952 39              ZFA21  RTS
 
 F953 8DF2            LCURS2 BSR  LCUR21
 F955 0F02            ENDCUP CLR  ESCFLG-DIRPAG
 F957 16FD35                 LBRA DTEXT8
 
 F95A 8606            PEVEN  LDA  #6
 F95C 2026                   BRA  SPCUR1
                      ;
 F95E 9715            PDOTX1 STA  GXADDR-DIRPAG
 F960 8608                   LDA  #8
 F962 2020                   BRA  SPCUR1
                      ;
 F964 B7EF16          PDOTX2 STA  GXADDR+1
 F967 860A                   LDA  #10
 F969 2019                   BRA  SPCUR1
                      ;
 F96B 9713            PDOTY1 STA  GYADDR-DIRPAG
 F96D 860C                   LDA  #12
 F96F 2013                   BRA  SPCUR1
                      ;
 F971 1E89            PDOTY2 EXG  A,B
 F973 9613                   LDA  GYADDR-DIRPAG
 F975 1F02                   TFR  D,Y
 F977 9E15                   LDX  GXADDR-DIRPAG    ;get X address
 F979 BDFF1B                 JSR  PIXADR
 F97C E884                   EORB ,X
 F97E E784                   STB  ,X
 F980 20D3                   BRA  ENDCUP
                      ;
 F982 8602            SPCURS LDA  #2
 F984 9702            SPCUR1 STA  ESCFLG-DIRPAG
 F986 16FD09                 LBRA DTEXT3
 F989 860E            CURPS2 LDA  #14
 F98B 20F7                   BRA  SPCUR1
 
 F98D DC07            INSLIN LDD  YADDR-DIRPAG
 F98F 10930C                 CMPD BOTTOM-DIRPAG
 F992 2736                   BEQ  LTD8      ; if already last line do nothing
 F994 9331                   SUBD NRLINS-1-DIRPAG ;the line is already deleted
 F996 4F                     CLRA
 F997 5C                     INCB           ;start one rasterline above
 F998 5C                     INCB
 F999 3406                   PSHS D
 F99B DC0C                   LDD BOTTOM-DIRPAG
 F99D 5C                     INCB
 F99E C001            REPTI  SUBB #1
 F9A0 3406                   PSHS D
 F9A2 8E0000                 LDX  #0
 F9A5 17058E                 LBSR OFFSET
 F9A8 1F13                   TFR X,U       ; Dest Pointer in U
 F9AA ECE4                   LDD  ,S
 F9AC 9331                   SUBD NRLINS-1-DIRPAG
 F9AE 8E0000                 LDX  #0
 F9B1 170582                 LBSR OFFSET   ; Source Pointer in X
 F9B4 17FF38                 LBSR COPYL    ; Copy one Rasterline
 F9B7 3506                   PULS D
 F9B9 10A3E4                 CMPD ,S
 F9BC 26E0                   BNE  REPTI
 F9BE 3506                   PULS D
 F9C0 D331                   ADDD NRLINS-1-DIRPAG
 F9C2 1F02                   TFR  D,Y
 F9C4 8E0000                 LDX  #0
 F9C7 1705B0                 LBSR ERASL     ;clear last line
 F9CA 1605A3          LTD8   LBRA TD8
 
 F9CD DC07            DELLIN LDD  YADDR-DIRPAG
 F9CF 10930C                 CMPD BOTTOM-DIRPAG
 F9D2 27F6                   BEQ  LTD8      ; if already last line do nothing
 F9D4 9331                   SUBD NRLINS-1-DIRPAG ; Line is alread deleted
 F9D6 4F                     CLRA
 F9D7 5C                     INCB           ; Start one raster line above
 F9D8 5C                     INCB
 F9D9 C001            REPTD  SUBB #1
 F9DB 3406                   PSHS D
 F9DD 8E0000                 LDX  #0
 F9E0 170553                 LBSR OFFSET
 F9E3 1F13                   TFR X,U       ; Source Pointer in U
 F9E5 ECE4                   LDD  ,S
 F9E7 D331                   ADDD NRLINS-1-DIRPAG
 F9E9 8E0000                 LDX  #0
 F9EC 170547                 LBSR OFFSET   ; Dest Pointer in X
 F9EF 1E13                   EXG  X,U
 F9F1 17FEFB                 LBSR COPYL    ; Copy one Rasterline
 F9F4 3506                   PULS D
 F9F6 10930C                 CMPD BOTTOM-DIRPAG
 F9F9 26DE                   BNE  REPTD
 F9FB D331                   ADDD NRLINS-1-DIRPAG
 F9FD 1F02                   TFR  D,Y
 F9FF 8E0000                 LDX  #0
 FA02 170575                 LBSR ERASL     ;clear last line
 FA05 20C3                   BRA  LTD8
 
 FA07 8EFA14          EMUEXIT LDX  #TEXIT
 FA0A A680            LPEXIT  LDA  ,X+
 FA0C B7FD3C                  STA  EMUCMD
 FA0F 26F9                    BNE  LPEXIT
 FA11 7EF225                  JMP  HKS
 FA14 45584954        TEXIT   FCC  "EXIT"
 FA18 00                      FCB  $00
 
                      ORIG   SET  *
 
                             ORG  $FA1F
                      ;
                      ; CHRTBL contains a complete ASCII
                      ; upper and lower case character set
                      ; in a 5 x 7 matrix with lower case
                      ; descenders, making it effectively
                      ; 5 x 9.
                      ;
                      ; German umlaut as upper case
 FA1F 88007088F88888         FCB    $88,$00,$70,$88,$F8,$88,$88       ;AE
 FA26 88708888888870         FCB    $88,$70,$88,$88,$88,$88,$70       ;OE
 FA2D 88008888888870         FCB    $88,$00,$88,$88,$88,$88,$70       ;UE
                      ; German umlaut as lower case
 FA34 50007008788878         FCB    $50,$00,$70,$08,$78,$88,$78       ;ae
 FA3B 50007088888870         FCB    $50,$00,$70,$88,$88,$88,$70       ;oe
 FA42 50008888889868         FCB    $50,$00,$88,$88,$88,$98,$68       ;ue
 FA49 7088B08888A890         FCB    $70,$88,$B0,$88,$88,$A8,$90       ;SZ
                      ; Character for DEL
 FA50 01010911A1C1E1         FCB    $01,$01,$09,$11,$A1,$C1,$E1       ;DEL
                      ;
 FA57 00000000000000  CHRTBL FCB    $00,$00,$00,$00,$00,$00,$00      ; SPACE
 FA5E 20202020200020         FCB    $20,$20,$20,$20,$20,$00,$20      ; !
 FA65 50505000000000         FCB    $50,$50,$50,$00,$00,$00,$00      ; "
 FA6C 5050F850F85050         FCB    $50,$50,$F8,$50,$F8,$50,$50      ; #
 FA73 2078A07028F020         FCB    $20,$78,$A0,$70,$28,$F0,$20      ; $
 FA7A C0C81020409818         FCB    $C0,$C8,$10,$20,$40,$98,$18      ; %
 FA81 20505060A89068         FCB    $20,$50,$50,$60,$A8,$90,$68      ; &
 FA88 10204000000000         FCB    $10,$20,$40,$00,$00,$00,$00      ; '
 FA8F 10204040402010         FCB    $10,$20,$40,$40,$40,$20,$10      ; (
 FA96 40201010102040         FCB    $40,$20,$10,$10,$10,$20,$40      ; )
 FA9D 0020A870A82000         FCB    $00,$20,$A8,$70,$A8,$20,$00      ; *
 FAA4 002020F8202000         FCB    $00,$20,$20,$F8,$20,$20,$00      ; +
 FAAB 01010101212141         FCB    $01,$01,$01,$01,$21,$21,$41      ; ,
 FAB2 000000F8000000         FCB    $00,$00,$00,$F8,$00,$00,$00      ; -
 FAB9 00000000002020         FCB    $00,$00,$00,$00,$00,$20,$20      ; .
 FAC0 00081020408000         FCB    $00,$08,$10,$20,$40,$80,$00      ; /
 FAC7 708898A8C88870         FCB    $70,$88,$98,$A8,$C8,$88,$70      ; 0
 FACE 20602020202070         FCB    $20,$60,$20,$20,$20,$20,$70      ; 1
 FAD5 708808102040F8         FCB    $70,$88,$08,$10,$20,$40,$F8      ; 2
 FADC F8102010088870         FCB    $F8,$10,$20,$10,$08,$88,$70      ; 3
 FAE3 10305090F81010         FCB    $10,$30,$50,$90,$F8,$10,$10      ; 4
 FAEA F880F008088870         FCB    $F8,$80,$F0,$08,$08,$88,$70      ; 5
 FAF1 304080F0888870         FCB    $30,$40,$80,$F0,$88,$88,$70      ; 6
 FAF8 F8081020404040         FCB    $F8,$08,$10,$20,$40,$40,$40      ; 7
 FAFF 70888870888870         FCB    $70,$88,$88,$70,$88,$88,$70      ; 8
 FB06 70888878081060         FCB    $70,$88,$88,$78,$08,$10,$60      ; 9
 FB0D 00003030003030         FCB    $00,$00,$30,$30,$00,$30,$30      ; :
 FB14 01313101313161         FCB    $01,$31,$31,$01,$31,$31,$61      ; ;
 FB1B 10204080402010         FCB    $10,$20,$40,$80,$40,$20,$10      ; <
 FB22 0000F800F80000         FCB    $00,$00,$F8,$00,$F8,$00,$00      ; =
 FB29 40201008102040         FCB    $40,$20,$10,$08,$10,$20,$40      ; >
 FB30 70880810200020         FCB    $70,$88,$08,$10,$20,$00,$20      ; ?
 FB37 3048B8A8B84038         FCB    $30,$48,$B8,$A8,$B8,$40,$38      ; @
 FB3E 708888F8888888         FCB    $70,$88,$88,$F8,$88,$88,$88      ; A
 FB45 F08888F08888F0         FCB    $F0,$88,$88,$F0,$88,$88,$F0      ; B
 FB4C 70888080808870         FCB    $70,$88,$80,$80,$80,$88,$70      ; C
 FB53 E09088888890E0         FCB    $E0,$90,$88,$88,$88,$90,$E0      ; D
 FB5A F88080F08080F8         FCB    $F8,$80,$80,$F0,$80,$80,$F8      ; E
 FB61 F88080F8808080         FCB    $F8,$80,$80,$F8,$80,$80,$80      ; F
 FB68 78808098888878         FCB    $78,$80,$80,$98,$88,$88,$78      ; G
 FB6F 888888F8888888         FCB    $88,$88,$88,$F8,$88,$88,$88      ; H
 FB76 70202020202070         FCB    $70,$20,$20,$20,$20,$20,$70      ; I
 FB7D 38101010109060         FCB    $38,$10,$10,$10,$10,$90,$60      ; J
 FB84 8890A0C0A09088         FCB    $88,$90,$A0,$C0,$A0,$90,$88      ; K
 FB8B 808080808080F8         FCB    $80,$80,$80,$80,$80,$80,$F8      ; L
 FB92 88D8A8A8888888         FCB    $88,$D8,$A8,$A8,$88,$88,$88      ; M
 FB99 8888C8A8988888         FCB    $88,$88,$C8,$A8,$98,$88,$88      ; N
 FBA0 70888888888870         FCB    $70,$88,$88,$88,$88,$88,$70      ; O
 FBA7 F08888F0808080         FCB    $F0,$88,$88,$F0,$80,$80,$80      ; P
 FBAE 70888888A89068         FCB    $70,$88,$88,$88,$A8,$90,$68      ; Q
 FBB5 F08888F0A09088         FCB    $F0,$88,$88,$F0,$A0,$90,$88      ; R
 FBBC 788080700808F0         FCB    $78,$80,$80,$70,$08,$08,$F0      ; S
 FBC3 F8202020202020         FCB    $F8,$20,$20,$20,$20,$20,$20      ; T
 FBCA 88888888888870         FCB    $88,$88,$88,$88,$88,$88,$70      ; U
 FBD1 88888888885020         FCB    $88,$88,$88,$88,$88,$50,$20      ; V
 FBD8 888888A8A8A850         FCB    $88,$88,$88,$A8,$A8,$A8,$50      ; W
 FBDF 88885020508888         FCB    $88,$88,$50,$20,$50,$88,$88      ; X
 FBE6 88888850202020         FCB    $88,$88,$88,$50,$20,$20,$20      ; Y
 FBED F80810204080F8         FCB    $F8,$08,$10,$20,$40,$80,$F8      ; Z
 FBF4 30202020202030         FCB    $30,$20,$20,$20,$20,$20,$30      ; [
 FBFB 00804020100800         FCB    $00,$80,$40,$20,$10,$08,$00      ; \
 FC02 30101010101030         FCB    $30,$10,$10,$10,$10,$10,$30      ; ]
 FC09 2070A820202020         FCB    $20,$70,$A8,$20,$20,$20,$20      ; ^
 FC10 010101010101F9         FCB    $01,$01,$01,$01,$01,$01,$F9      ; ULIN
 FC17 40201000000000         FCB    $40,$20,$10,$00,$00,$00,$00      ; BACK
 FC1E 00007008788878         FCB    $00,$00,$70,$08,$78,$88,$78      ; a
 FC25 8080F0888888F0         FCB    $80,$80,$F0,$88,$88,$88,$F0      ; b
 FC2C 00007088808070         FCB    $00,$00,$70,$88,$80,$80,$70      ; c
 FC33 08087888888878         FCB    $08,$08,$78,$88,$88,$88,$78      ; d
 FC3A 00007888F88070         FCB    $00,$00,$78,$88,$F8,$80,$70      ; e
 FC41 3048E040404040         FCB    $30,$48,$E0,$40,$40,$40,$40      ; f
 FC48 699989996909F1         FCB    $69,$99,$89,$99,$69,$09,$F1      ; g
 FC4F 8080F088888888         FCB    $80,$80,$F0,$88,$88,$88,$88      ; h
 FC56 20002020202020         FCB    $20,$00,$20,$20,$20,$20,$20      ; i
 FC5D 09090909099161         FCB    $09,$09,$09,$09,$09,$91,$61      ; j
 FC64 808090A0D08888         FCB    $80,$80,$90,$A0,$D0,$88,$88      ; k
 FC6B 60202020202070         FCB    $60,$20,$20,$20,$20,$20,$70      ; l
 FC72 0000D0A8A8A8A8         FCB    $00,$00,$D0,$A8,$A8,$A8,$A8      ; m
 FC79 0000F088888888         FCB    $00,$00,$F0,$88,$88,$88,$88      ; n
 FC80 00007088888870         FCB    $00,$00,$70,$88,$88,$88,$70      ; o
 FC87 B1C989C9B18181         FCB    $B1,$C9,$89,$C9,$B1,$81,$81      ; p
 FC8E 69998999690909         FCB    $69,$99,$89,$99,$69,$09,$09      ; q
 FC95 0000B0C8808080         FCB    $00,$00,$B0,$C8,$80,$80,$80      ; r
 FC9C 000078807008F0         FCB    $00,$00,$78,$80,$70,$08,$F0      ; s
 FCA3 4040E040404830         FCB    $40,$40,$E0,$40,$40,$48,$30      ; t
 FCAA 00008888889868         FCB    $00,$00,$88,$88,$88,$98,$68      ; u
 FCB1 00008888885020         FCB    $00,$00,$88,$88,$88,$50,$20      ; v
 FCB8 0000888888A850         FCB    $00,$00,$88,$88,$88,$A8,$50      ; w
 FCBF 00008850205088         FCB    $00,$00,$88,$50,$20,$50,$88      ; x
 FCC6 898989996909F1         FCB    $89,$89,$89,$99,$69,$09,$F1      ; y
 FCCD 0000F8102040F8         FCB    $00,$00,$F8,$10,$20,$40,$F8      ; z
 FCD4 30404080404030         FCB    $30,$40,$40,$80,$40,$40,$30      ; {
 FCDB 20202020202020         FCB    $20,$20,$20,$20,$20,$20,$20      ; |
 FCE2 60101008101060         FCB    $60,$10,$10,$08,$10,$10,$60      ; }
 FCE9 40A81000000000         FCB    $40,$A8,$10,$00,$00,$00,$00      ; ~
 
                              ;OPT  NOL
                      ORIG   SET  *
                             ;OPT  LIS
 
                             ORG  ANFANG+$D00  ;$FD00-$FD0F patch with 0 if no 
RTC present
 
 FD00 00000000000000         FCB   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$
00,$00,$00,$00,$00
 FD07 00000000000000
 FD0E 0000
 
                             ORG  ANFANG+$D40  ;$FCF0-$FD3F free for I/O
                      ;
                      ;
                      ; Boot routine for the FLEX Operating System
                      ; It loads the Bootblock at address $C100
                      ; then it starts the routine
                      ;
 FD40 BDFFD2          BOOT   JSR  CURSAN     ;Cursor on
 FD43 CCC10D                 LDD  #$C10D     ;Drive 0, Restore 12 ms
 FD46 B7FD38                 STA  FLDRIV    ;and start timer
 FD49 F7FD30                 STB  FLCOMM    ;restore
 FD4C 8D35                   BSR  RET1       ;Delay
 FD4E F6FD30          BOOT1  LDB  FLCOMM    ;check for ready
 FD51 2A09                   BPL  BOOT3      ;ready
 FD53 7FFD38                 CLR  FLDRIV    ;stop timer
 FD56 BDFFD7                 JSR  CURAUS     ;Cursor off
 FD59 7EF225                 JMP  HKS
                      ;
 FD5C C501            BOOT3  BITB #$01
 FD5E 26EE                   BNE  BOOT1      ;still busy
 FD60 CC0180                 LDD  #$0180     ;Sektor 1, 256 Bytes
 FD63 B7FD32                 STA  FLSEKT
 FD66 8EC180                 LDX  #$C100+$80 ;Store Boots. at $C100
 FD69 8684                   LDA  #$84
 FD6B 8D16                   BSR  RET1
 FD6D B7FD30                 STA  FLCOMM    ;read one Sektor
 FD70 B6FD38          BOOT2  LDA  FLDRIV    ;Data request
 FD73 2AFB                   BPL  BOOT2      ;no
 FD75 B6FD33                 LDA  FLDATA    ;get byte
 FD78 A785                   STA  B,X        ;save it
 FD7A 5C                     INCB
 FD7B 28F3                   BVC  BOOT2      ;next byte
 FD7D 4F                     CLRA            ;set Direct Page to 0
 FD7E 1F8B                   TFR  A,DP
 FD80 7EC100                 JMP  $C100      ;read rest of Flex
                      ;
 FD83 8D00            RET1   BSR  RTN1
 FD85 8D00            RTN1   BSR  RTN
 FD87 39              RTN    RTS
 
                      ;BUMPX  MACRO
                      ;       LEAX $40,X
                      ;       CMPX DBASE-DIRPAG
                      ;       BLO  *+6
                      ;       LEAX -$4000,X
                      ;       ENDM
                      ;
                      ; subroutine to delete the background on which
                      ; a character has to be drawn.
                      ;
 FD88 3416            LOESCH PSHS D,X
 FD8A 108EFDB2               LDY  #LOETBL
 FD8E 10AEA6                 LDY  A,Y
 FD91 B6EF32                 LDA  NRLINS
 FD94 3422                   PSHS A,Y
                      ;
 FD96 EC61            RCL    LDD  1,S
 FD98 A484                   ANDA ,X
 FD9A E401                   ANDB 1,X
 FD9C ED84                   STD  ,X
 FD9E 308840                 LEAX $40,X
 FDA1 BCEF03                 CMPX DBASE
 FDA4 2504                   BLO  *+6
 FDA6 3089C000               LEAX -$4000,X
 FDAA 6AE4                   DEC  ,S
 FDAC 26E8                   BNE  RCL
 FDAE 3263                   LEAS 3,S
 FDB0 3596                   PULS D,X,PC
                      ;
 FDB2 01FFC07F        LOETBL FDB  %0000000111111111,%1100000001111111
 FDB6 F01FFC07               FDB  %1111000000011111,%1111110000000111
 
                      ;
                      ;
                      ; DCHAR does the processing to draw one
                      ; character on the current cursor position.
                      ;
 FDBA 3476            XDCHAR PSHS U,Y,X,D    ;save all registers
 FDBC 8120                   CMPA #BLANK     ;skip control chars
 FDBE 102500A0               LBLO NIXIS
 FDC2 FEEF40                 LDU  CHATAB     ;Point to Char.tab.
 FDC5 817F                   CMPA #$7F       ;Is ist DEL?
 FDC7 2608                   BNE  NODEL
 FDC9 B6EF3A                 LDA  MULINS
 FDCC 40                     NEGA            ;Subtract length of
 FDCD 33C6                   LEAU A,U        ;one character
 FDCF 2033                   BRA  DCHR
 FDD1 7DEF59          NODEL  TST  DEUTSC
 FDD4 2726                   BEQ  NODEU
 FDD6 815E                   CMPA #'^'       ;PFEIL
 FDD8 2722                   BEQ  NODEU
 FDDA 815F                   CMPA #$5F       ;ULIN
 FDDC 271E                   BEQ  NODEU
 FDDE 3402                   PSHS A
 FDE0 84DF                   ANDA #%11011111 ;to upper case
 FDE2 815A                   CMPA #'Z'
 FDE4 3502                   PULS A
 FDE6 2314                   BLS  NODEU      ;no german umlaut
 FDE8 8520                   BITA #%00100000
 FDEA 2702                   BEQ  GROSS      ;jump to upper case
 FDEC 801D                   SUBA #($7B-$5E) ;$7B -> $5E, ...
 FDEE 8063            GROSS  SUBA #($5B+8)   ;$5B -> -8, ...
 FDF0 40                     NEGA            ;-8 -> 8, ...
 FDF1 F6EF3A                 LDB  MULINS
 FDF4 3D                     MUL
 FDF5 43                     COMA
 FDF6 53                     COMB
 FDF7 C30001                 ADDD #1         ;subtract from U
 FDFA 2006                   BRA  DEU1
 
 FDFC F6EF3A          NODEU  LDB  MULINS     ;Nr. of lines per char
 FDFF 8020                   SUBA #BLANK
 FE01 3D                     MUL             ;compute entry addr in table
 FE02 33CB            DEU1   LEAU D,U        ;Point to this address
                      ;
                      ; Drawing the character
                      ;
 FE04 BEEF05          DCHR   LDX  XADDR      ;X-coordinate
 FE07 10BEEF07               LDY  YADDR      ;and Y-coordinate
 FE0B 3121                   LEAY 1,Y        ;start one line higher
 FE0D 170126                 LBSR OFFSET     ;compute pixel address
 FE10 17FF75                 LBSR LOESCH
 FE13 108EFE2E               LDY  #DCHAR1    ;computed goto
 FE17 E6C4                   LDB  ,U         ;check if shifted char
 FE19 56                     RORB
 FE1A 2404                   BCC  DCHAR0     ;no, do unshifted jump
 FE1C 30890080               LEAX $80,X
 FE20 308840          DCHAR0 LEAX $40,X
 FE23 BCEF03                 CMPX DBASE
 FE26 2504                   BLO  JUMP
 FE28 3089C000               LEAX -$4000,X
 FE2C 6EA6            JUMP   JMP  A,Y
                      ;
 FE2E 2051            DCHAR1 BRA  CASE1
 FE30 2032                   BRA  CASE2
 FE32 2005                   BRA  CASE3
 FE34 CC0704          CASE4  LDD  #$0704
 FE37 2003                   BRA  CASE40
                      ;
 FE39 CC0710          CASE3  LDD  #$0710
 FE3C 3406            CASE40 PSHS D
 FE3E A6C0            CASE30 LDA  ,U+
 FE40 44                     LSRA
 FE41 E661                   LDB  1,S
 FE43 3D                     MUL
 FE44 E384                   ADDD ,X
 FE46 ED84                   STD  ,X
 FE48 308840                 LEAX $40,X
 FE4B BCEF03                 CMPX DBASE
 FE4E 2504                   BLO  *+6
 FE50 3089C000               LEAX -$4000,X
 FE54 6AE4                   DEC  ,S
 FE56 26E6                   BNE  CASE30
 FE58 3262                   LEAS 2,S
 FE5A 7DEF58          HIGH1  TST  HIGHLI
 FE5D 2703                   BEQ  NIXIS
 FE5F 170057                 LBSR XINV       ; inverse display character 
 FE62 35F6            NIXIS  PULS D,X,Y,U,PC
                      ;
 FE64 F6EF3A          CASE2  LDB  MULINS
 FE67 A6C0            CASE20 LDA  ,U+
 FE69 44                     LSRA
 FE6A 44                     LSRA
 FE6B 44                     LSRA
 FE6C AB84                   ADDA ,X
 FE6E A784                   STA  ,X
 FE70 308840                 LEAX $40,X
 FE73 BCEF03                 CMPX DBASE
 FE76 2504                   BLO  *+6
 FE78 3089C000               LEAX -$4000,X
 FE7C 5A                     DECB
 FE7D 26E8                   BNE  CASE20
 FE7F 20D9                   BRA  HIGH1
 
 FE81 F6EF3A          CASE1  LDB  MULINS
 FE84 A6C0            CASE10 LDA  ,U+
 FE86 44                     LSRA
 FE87 AB84                   ADDA ,X
 FE89 A784                   STA  ,X
 FE8B 308840                 LEAX $40,X
 FE8E BCEF03                 CMPX DBASE
 FE91 2504                   BLO  *+6
 FE93 3089C000               LEAX -$4000,X
 FE97 5A                     DECB
 FE98 26EA                   BNE  CASE10
 FE9A 20BE                   BRA  HIGH1
                      ;
                      ; Subr. to bump the display pointer
                      ;
 FE9C 308840          BUMP   LEAX 64,X
 FE9F BCEF03          BUMP0  CMPX DBASE
 FEA2 2504                   BLO  BUMP1
 FEA4 3089C000               LEAX -$4000,X
 FEA8 39              BUMP1  RTS
                      ;
                      ; Cursor left, near the left character
                      ;
 FEA9 FE003F800FE003  INVTB2 FDB  $FE00,$3F80,$0FE0,$03F8
 FEB0 F8
                      ;
                      ; Curosr right, small
                      ;
 FEB1 7E001F8007E001  INVTBL FDB  $7E00,$1F80,$07E0,$01F8
 FEB8 F8
                      ;
                      ; XINV does the processing to invert
                      ; the cursor
                      ; ATTENTION: DP register must be set before
                      ;
 FEB9 3402            XINV   PSHS A
 FEBB 9601                   LDA  INSRTF-DIRPAG
 FEBD 0F01                   CLR  INSRTF-DIRPAG
 FEBF 8D0C                   BSR  INVCU1
 FEC1 9701                   STA  INSRTF-DIRPAG
 FEC3 3582                   PULS A,PC
                      ;
                      ; INVCUR does the processing to invert one
                      ; character on the current cursor position
                      ;
 FEC5 7DEF0E          INVCUR TST  INVFLG
 FEC8 2650                   BNE  INV12
 FECA 73EF5B                 COM  CURSOR   ;Cursor complement
 FECD 3436            INVCU1 PSHS D,X,Y
 FECF C6EF                   LDB  #DRCTPG  ;set direct page
 FED1 1F9B                   TFR  B,DP
 FED3 9E05                   LDX  XADDR-DIRPAG
 FED5 109E07                 LDY  YADDR-DIRPAG
 FED8 3121                   LEAY 1,Y
 FEDA 0D01                   TST  INSRTF-DIRPAG
 FEDC 2707                   BEQ  XINV0
 FEDE D632                   LDB  NRLINS-DIRPAG
 FEE0 C002                   SUBB #2
 FEE2 50                     NEGB
 FEE3 31A5                   LEAY B,Y
 FEE5 8D4F            XINV0  BSR  OFFSET
 FEE7 D632                   LDB  NRLINS-DIRPAG
 FEE9 0D01                   TST  INSRTF-DIRPAG
 FEEB 2702                   BEQ  XINV1
 FEED C602                   LDB  #2
 FEEF 108EFEB1        XINV1  LDY  #INVTBL
 FEF3 0D58                   TST  HIGHLI-DIRPAG
 FEF5 2704                   BEQ  INV11
 FEF7 108EFEA9               LDY  #INVTB2
 FEFB 31A6            INV11  LEAY A,Y
 FEFD 3404                   PSHS B
 FEFF ECA4            REPINV LDD  ,Y
 FF01 A884                   EORA ,X
 FF03 E801                   EORB 1,X
 FF05 ED84                   STD  ,X
 FF07 308840                 LEAX $40,X
 FF0A 9C03                   CMPX DBASE-DIRPAG
 FF0C 2504                   BLO  *+6
 FF0E 3089C000               LEAX -$4000,X
 FF12 6AE4                   DEC  ,S
 FF14 26E9                   BNE  REPINV
 FF16 3261                   LEAS 1,S
 FF18 35B6                   PULS D,X,Y,PC
 FF1A 39              INV12  RTS
                      ;
                      ; PIXADR computes the byte offset from display
                      ; X and Y Registers contain the coordinates
                      ; on exit X contains the memory address,
                      ; A the Bit-Offset
                      ;
 FF1B 8D19            PIXADR BSR  OFFSET     ;compute offset
 FF1D 3402                   PSHS A          ;save accu
 FF1F B6EF0B                 LDA  SCROFS     ;get screen offset
 FF22 C680                   LDB  #128       ;compute offset
 FF24 3D                     MUL
 FF25 308B                   LEAX D,X        ;adjust pointer
 FF27 17FF75                 LBSR  BUMP0     ;check for end of display
 FF2A A6E4                   LDA  ,S         ;restore accu
 FF2C 5F                     CLRB            ;reset accu
 FF2D 4C                     INCA  
 FF2E 1A01                   ORCC #%00000001 ; SEC, Prepare carry for shift
 FF30 56              PIXA1  RORB
 FF31 4A                     DECA
 FF32 26FC                   BNE  PIXA1      ;get the bit position
 FF34 3582                   PULS A,PC
                      ;
                      ; OFFSET computes byte offset from display
                      ; base address.
                      ; Bit offset is in A (Range 0 - 7)
                      ; On entry X-register and Y-register contain
                      ; X and Y coordinates.
                      ;
 FF36 1F10            OFFSET TFR  X,D        ;column pointer in X
 FF38 BEEF03                 LDX  DBASE      ;get display base address
 FF3B 3406                   PSHS D          ;save complete address
 FF3D C406                   ANDB #%00000110 ;mask byte-address
 FF3F E7E4                   STB  ,S         ;save bit-address
 FF41 E661                   LDB  1,S        ;get byte-address
 FF43 44                     LSRA            ;divide by 8
 FF44 56                     RORB
 FF45 54                     LSRB
 FF46 54                     LSRB
 FF47 C040                   SUBB #$40       ;other end of the line
 FF49 3085                   LEAX B,X        ;get byte pointer
 FF4B 1F20                   TFR  Y,D        ;get row pointer in B
 FF4D 8640                   LDA  #$40
 FF4F 3D                     MUL
 FF50 50                     NEGB
 FF51 8900                   ADCA #0
 FF53 40                     NEGA
 FF54 308B                   LEAX D,X        ;X now contains right Byte adr
 FF56 3586                   PULS D,PC       ;Restore Bit-Adress in Accu A
 
 FF58 7CEF02          ESCAPE INC  ESCFLG     ;set escape flag
 FF5B 16F734                 LBRA DTEXT3     ;and back
 
 FF5E 4F              OVRCUR CLRA            ;set an overwrite cursor
 FF5F 2002                   BRA  INSCU1
 
 FF61 8601            INSCUR LDA  #1        ;set an insert cursor
 FF63 0D5B            INSCU1 TST  CURSOR-DIRPAG
 FF65 2703                   BEQ  INSCU2
 FF67 BDFEC5                 JSR  INVCUR    ; clear cursor
 FF6A 9701            INSCU2 STA  INSRTF-DIRPAG
 FF6C 2002                   BRA  TD8 ; draw cursor again
 
 FF6E 8D03            ERAEOL BSR  ERALIN
 FF70 16F71C          TD8    LBRA DTEXT8
 
 FF73 BEEF05          ERALIN LDX  XADDR     ;clear from cursor
 FF76 10BEEF07               LDY  YADDR
 FF7A 3121            ERASL  LEAY 1,Y
 FF7C 3430            ERALU  PSHS X,Y       ;Y -> X
 FF7E 8DB6                   BSR  OFFSET
 FF80 17FE05                 LBSR LOESCH    ;clear char. on cursorpos.
 FF83 3526                   PULS D,Y       ;X -> D, Y -> Y
 FF85 F3EF3B                 ADDD CHROFS-1
 FF88 10B3EF09               CMPD EOLNX
 FF8C 2404                   BCC  ENDEL     ;at end, show cursor
 FF8E 1F01                   TFR  D,X
 FF90 20EA                   BRA  ERALU     ;clear next position
 FF92 39              ENDEL  RTS
 
 FF93 8DDE            ERAEOS BSR  ERALIN
 FF95 FCEF07                 LDD  YADDR
 FF98 10B3EF0C               CMPD BOTTOM
 FF9C 27D2                   BEQ  TD8       ;maybe it was the last one
 FF9E B3EF31                 SUBD NRLINS-1  ;the line already has been deleted
 FFA1 4F                     CLRA
 FFA2 5C                     INCB           ;start one raster line above
 FFA3 5C                     INCB
 FFA4 C001            REPT   SUBB #1
 FFA6 3446                   PSHS D,U
 FFA8 1F02                   TFR  D,Y
 FFAA 8E0000                 LDX  #0
 FFAD 8D87                   BSR  OFFSET
 FFAF 338840                 LEAU 64,X
 FFB2 4F                     CLRA
 FFB3 17F924                 LBSR CLEARS    ;clear one raster line
 FFB6 3546                   PULS D,U
 FFB8 10B3EF0C               CMPD BOTTOM
 FFBC 26E6                   BNE  REPT      ;do loop
 FFBE 1F02            LASTLI TFR  D,Y
 FFC0 8E0000                 LDX  #0
 FFC3 8DB5                   BSR  ERASL     ;clear last line
 FFC5 20A9                   BRA  TD8
 
 
 FFC7 86FF            GERMAN LDA  #$FF
 FFC9 B7EF59          TOG    STA  DEUTSC
 FFCC 7EF225                 JMP  HKS
 FFCF 4F              ASCII  CLRA
 FFD0 20F7                   BRA  TOG
 
 FFD2 8615            CURSAN LDA  #$15
 FFD4 7EF635          MAKE   JMP  XDTEXT
 FFD7 8605            CURAUS LDA  #5
 FFD9 20F9                   BRA  MAKE
 
                      ;       OPT  NOL
                      ORI    SET  *
                      ;       OPT  LIS
 
                             ORG  ANFANG+$FF0
 
 FFF0 0000            ZFFF0  FDB  0
 
 FFF2 F552                   FDB  SWI3
 FFF4 F556                   FDB  SWI2
 FFF6 F55A                   FDB  FIRQ
 FFF8 F55E                   FDB  IRQ
 FFFA F562                   FDB  SWI
 FFFC F566                   FDB  NMI
 FFFE F000                   FDB  ZRESTA
 
                             END

SYMBOL TABLE
    ACIACO 00 FCF4    ACIADA 00 FCF5    ANFANG 00 F000     ASCII 02 FFCF
    ASDUMP 02 F2CF    BEGINN 02 F128      BELL 02 F902     BELL1 02 F90F
     BELL2 02 F919    BILANF 00 FCF7     BLANK 00 0020      BOOT 02 FD40
     BOOT1 02 FD4E     BOOT2 02 FD70     BOOT3 02 FD5C    BOTOM1 00 00FE
    BOTTOM 02 EF0C    BRPEND 02 EF6F        BS 02 F873    BUFPNT 00 CC14
      BUMP 02 FE9C     BUMP0 02 FE9F     BUMP1 02 FEA8     BUMPV 02 EF4E
    BYTANZ 02 EF88      BYTE 02 F4C4     BYTE0 02 F4C6     BYTE1 02 F4C8
     CASE1 02 FE81    CASE10 02 FE84     CASE2 02 FE64    CASE20 02 FE67
     CASE3 02 FE39    CASE30 02 FE3E     CASE4 02 FE34    CASE40 02 FE3C
     CFLEX 02 F373    CHATAB 02 EF40    CHECKS 02 EF89     CHEXL 02 F392
     CHEXR 02 F396    CHROFS 02 EF3C    CHRTBL 02 FA57     CLEA1 02 F8E2
    CLEARS 02 F8DA    CLRHKS 02 F3C9     CLRP1 02 F1BA    CLRPAG 02 F1C2
    CLRSC1 02 F142    CLRSCR 02 F1B8    CLRTAB 02 F20F       CLS 00 000C
    CNVERT 02 F478    COLOOP 02 F1AD    COLOR2 02 F67C    COLTAB 02 EF18
    COMMAN 02 EF5D     COMP1 02 F57A    COMPAR 02 F578     COMPX 02 F583
     COPYL 02 F8EF    COPYL1 02 F8F3        CR 02 F86D    CTABHO 02 F780
     CTLTA 02 EF3E    CTLTAB 02 F7C0    CURAUS 02 FFD7    CURPS2 02 F989
    CURSAN 02 FFD2    CURSOF 02 F6AF    CURSON 02 F6A7    CURSOR 02 EF5B
     DBASE 02 EF03       DC1 02 F8A2       DC2 02 F8B8       DC3 02 F8C1
       DC4 02 F8CF    DCHAR0 02 FE20    DCHAR1 02 FE2E      DCHR 02 FE04
    DEFCOM 02 F0D4    DEFTA1 02 F585    DELLIN 02 F9CD       DEU 02 F6CA
      DEU1 02 FE02    DEUOFF 02 F6CF     DEUON 02 F6C8    DEUTSC 02 EF59
    DIRPAG 00 EF00    DOCMND 00 CD4B    DOLOOP 02 F0F9    DO_CNV 02 F492
    DRCTPG 00 00EF    DTEXT3 02 F692    DTEXT4 02 F64C    DTEXT5 02 F64E
    DTEXT6 02 F6A3    DTEXT7 02 F6A1    DTEXT8 02 F68F    DTEXTC 02 F761
     DUMMY 02 EF00    EMPTY1 02 EF33    EMPTY2 02 EF34    EMPTY3 02 EF35
    EMUCMD 00 FD3C   EMUEXIT 02 FA07    ENDCUP 02 F955      ENDE 00 001A
     ENDEL 02 FF92     ENDHT 02 F073     ENDT1 02 F2F4    END_TA 02 F2F1
     EOLNX 02 EF09    ERAEOL 02 FF6E    ERAEOS 02 FF93    ERALIN 02 FF73
     ERALU 02 FF7C     ERASL 02 FF7A    ERRHKS 02 F21B     ERRO3 02 F35F
     ERRO4 02 F38F     ERRO6 02 F26C     ERRO8 02 F391       ESC 00 001B
    ESCAPE 02 FF58    ESCFLG 02 EF02    ESCOUT 02 F43E    ESCSE1 02 F779
    ESCSEQ 02 F768    ESCTAB 02 F810    ESCTBL 02 EF48     ESCVC 02 EF46
    ESCVEC 02 F800        FF 02 F883      FIRQ 02 F55A    FIRQVC 02 EF74
    FLCOMM 00 FD30    FLDATA 00 FD33    FLDRIV 00 FD38    FLSEKT 00 FD32
    FOURE0 02 F533    FOUREG 02 F531    FROMTO 02 F379    GERMAN 02 FFC7
    GETTAS 02 F348    GETTS9 02 F359        GO 02 F35C       GO1 02 F36E
     GROSS 02 FDEE    GXADDR 02 EF15    GYADDR 02 EF13    HALTAN 02 F2FC
     HIGH1 02 FE5A    HIGHLI 02 EF58       HKS 02 F225      HKS1 02 F246
    HKSTAB 02 F046    HKSTXT 02 F0B0      HOME 02 F868     IN1HG 02 F4F0
     IN4HX 02 F4B1    IN4HX0 02 F49C    IN4HX1 02 F4B3    INCADR 02 F29A
      INCH 02 F3CD     INCHA 02 F420     INHEX 02 F4D9    INHEX1 02 F4DC
     INITI 02 F1E7    INITSP 02 F07C    INOCUR 02 F446    INPPAR 02 F472
    INSCU1 02 FF63    INSCU2 02 FF6A    INSCUR 02 FF61    INSLIN 02 F98D
    INSRTF 02 EF01    INTPAG 02 EF3D    INTSC1 02 F5F3    INTSCR 02 F5F0
     INV11 02 FEFB     INV12 02 FF1A    INVCU1 02 FECD    INVCUR 02 FEC5
    INVFLG 02 EF0E    INVOFF 02 F6C5     INVON 02 F6BE    INVTB2 02 FEA9
    INVTBL 02 FEB1       IRQ 02 F55E    IRQEN0 02 F504    IRQEN1 02 F517
    IRQENT 02 F501    IRQVEC 02 EF76      ISAS 02 F2EC    ISEMPT 02 F462
     ISOFF 02 F6B8      JUMP 02 FE2C    LASTLI 02 FFBE    LCUR11 02 F91B
    LCUR21 02 F947    LCURS1 02 F934    LCURS2 02 F953        LF 02 F850
       LF1 02 F863       LF2 02 F865      LF21 02 F8D8       LF3 02 F85C
     LF882 02 F72D     LF8B5 02 F744     LF8B6 02 F745     LF8C5 02 F752
     LF8CF 02 F75E    LINBUF 00 C080     LINES 02 EF36    LINFE0 02 F281
    LINFED 02 F27A     LOAD0 02 F40F    LOCCNT 02 EF87    LODFLG 02 EF85
    LOESCH 02 FD88    LOETBL 02 FDB2     LOWUP 02 F481     LPCNT 00 0011
    LPEXIT 02 FA0A      LTD8 02 F9CA       LVN 02 F08D      MAKE 02 FFD4
    MEMADR 02 EF7E    MEMOR1 02 F253    MEMOR2 02 F258    MEMORY 02 F249
    MEMTAB 02 F064    MESEUR 02 F07D       MMU 00 FFE0    MMURAM 02 EFE0
    MORCUP 02 F938    MULINS 02 EF3A    NEWCHR 02 EF5A    NEWST1 02 EF0F
    NEWST2 02 EF10     NEXTT 02 F2D6     NIXIS 02 FE62       NMI 02 F566
      NMI1 02 F0DD    NMIVEC 02 EF7A     NODEL 02 FDD1     NODEU 02 FDFC
    NOHALT 02 F30C    NONHEX 02 F4AF     NORM1 02 F116    NORMAL 02 F10D
    NOSERI 02 F41D    NOTEMP 02 F464     NRCHR 02 EF37    NRLINS 02 EF32
    OFFSET 02 FF36       ORI 03 FFDB      ORIG 03 FCF0      OUT1 02 F3C7
     OUT2H 02 F3A1    OUT2HX 02 F3AF     OUT4H 02 F39F    OUT4HX 02 F3AD
      OUTA 02 F3D5     OUTCH 02 F3EA    OUTCH0 02 F3E0    OUTCH1 02 F3E8
    OUTCHS 02 F3F8    OUTCS1 02 F3FA    OUTREG 02 F51C    OVRCUR 02 FF5E
     PCRLF 02 F3C1     PDATA 02 F3B5    PDATA1 02 F3B7    PDATA3 02 F39E
    PDOTX1 02 F95E    PDOTX2 02 F964    PDOTY1 02 F96B    PDOTY2 02 F971
     PEVEN 02 F95A    PGEFLG 02 EF17    PIA1AC 00 FCF1    PIA1AD 00 FCF0
    PIA1BC 00 FCF3    PIA1BD 00 FCF2    PIA2BD 00 FCFA     PIXA1 02 FF30
    PIXADR 02 FF1B    PIXLIN 00 01F8       PLF 02 F3C5     POINT 02 F28B
    PRIREG 02 F53F    PSPACE 02 F3B1    PSTATU 02 F450     PUSHU 02 F1DE
    PUSHU1 02 F1E0       PUT 02 F30E    PUTLUP 02 F32B      RAUS 02 F4C3
     RAUS1 02 F4C1       RCL 02 FD96    REPINV 02 FEFF      REPT 02 FFA4
     REPTD 02 F9D9     REPTI 02 F99E      RET1 02 FD83       RTN 02 FD87
      RTN1 02 FD85      SAVE 02 EFDE    SAVEST 02 EF11    SAVUST 02 EF7C
    SCRDWN 02 F84B    SCREN1 02 EF42    SCREN2 02 EF44    SCRLIN 02 EF38
    SCRLUP 02 F6D2     SCRN1 00 0C0C     SCRN2 00 0808    SCROFS 02 EF0B
    SCROL1 02 F6FC    SCROL4 02 F70B    SCROL7 02 F70A    SCROL8 02 F71B
    SCROL9 02 F726    SCROLD 02 F729    SCROLL 02 F6F8     SCRUD 02 F6D6
    SCRUD1 02 F6F1    SCRUD2 02 F6F6    SEARCH 02 F56A    SERCH1 02 F56C
    SERCHX 02 F577    SERPAR 02 EF86    SERSTA 02 F406    SETCUX 02 F941
    SETCUY 02 F93D    SETINV 02 F6C0     SETUP 02 F5FA     SLASH 02 F276
      SOFT 02 EF4A    SOFTSC 02 F8FE    SPCUR1 02 F984    SPCURS 02 F982
     STACK 00 EF00    STACK2 00 EE40    STATUS 02 F44B    SW2VEC 02 EF72
    SW3VEC 02 EF70       SWI 02 F562      SWI2 02 F556      SWI3 02 F552
    SWIEN0 02 F4FB    SWIENT 02 F4F5    SWITCH 02 F5A5    SWIVEC 02 EF78
    SWTCHB 02 F5D0     TABLE 02 F2A1    TABLE0 02 F2AC    TABLE1 02 F2BC
       TD8 02 FF70      TEMP 02 EF8A     TEMPA 02 EF84     TEMPX 02 EF80
     TEMPY 02 EF82     TEXIT 02 FA14     TFROM 02 F09A    THALLO 02 F07D
       TOG 02 FFC9    TOHKS0 02 F3D1    TO_HKS 02 F02D    TRANS1 02 F497
    TRANS2 02 F494    TREGIS 02 F0B6     TSTIN 02 F466    TSTINP 02 F46B
    TSTINS 02 F413       TTO 02 F0A1        UL 02 EF8B    UNUBI2 00 FC0F
    UNUSED 02 EF5C    UPAROW 02 F28F    USERST 00 EDE0      VERS 00 0004
     VIDEO 02 F339    VIDEO0 02 F336    VIDPAG 00 FCF6     WARMS 00 CD03
    WERTMS 02 F0A7     XADDR 02 EF05    XBOTOM 02 EF4C    XDCHAR 02 FDBA
    XDTEXT 02 F635      XINV 02 FEB9     XINV0 02 FEE5     XINV1 02 FEEF
     YADDR 02 EF07    ZCASEU 00 00C0    ZCHEXL 02 F009    ZCHEXR 02 F00C
    ZCONVT 02 F03A     ZF0A5 02 F0B2     ZF850 02 F677     ZFA0F 02 F933
     ZFA21 02 F952     ZFFF0 02 FFF0    ZFROMT 02 F003    ZIN4HX 02 F00F
    ZINCHA 02 F015    ZLOAD0 02 F030    ZOUT2H 02 F01B    ZOUT4H 02 F01E
    ZOUTC2 02 F018    ZPCRLF 02 F021    ZPDAT1 02 F027    ZPDATA 02 F024
    ZRECD0 02 F033    ZRESTA 02 F000    ZSPACE 02 F02A    ZSWBAK 02 F038
    ZSWTCH 02 F036    ZUCOMP 02 F03E    ZUINCH 02 F012    ZUNUBI 00 F03F
    ZUSRCH 02 F03C    ZUSTAT 02 F044    ZUXINV 02 F042    ZXDCHR 02 F040
428 SYMBOLS

0 error(s), 0 warning(s)
